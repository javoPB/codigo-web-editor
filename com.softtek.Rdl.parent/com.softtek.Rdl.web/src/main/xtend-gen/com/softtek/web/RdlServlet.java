/**
 * generated by Xtext 2.16.0
 */
package com.softtek.web;

import com.google.inject.Injector;
import com.softtek.web.RdlWebSetup;
import com.softtek.web.util.UtilGIT;
import java.io.File;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.log4j.Logger;
import org.eclipse.xtext.resource.IResourceServiceProvider;
import org.eclipse.xtext.util.DisposableRegistry;
import org.eclipse.xtext.web.server.InvalidRequestException;
import org.eclipse.xtext.web.servlet.HttpServiceContext;
import org.eclipse.xtext.web.servlet.XtextServlet;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Deploy this class into a servlet container to enable DSL-specific services.
 */
@WebServlet(name = "XtextServices", urlPatterns = "/xtext-service/*")
@SuppressWarnings("all")
public class RdlServlet extends XtextServlet {
  private DisposableRegistry disposableRegistry;
  
  private final Logger logg = Logger.getLogger(this.getClass());
  
  private final IResourceServiceProvider.Registry serviceProviderRegistry = IResourceServiceProvider.Registry.INSTANCE;
  
  @Override
  public void init() {
    try {
      super.init();
      final Injector injector = new RdlWebSetup().createInjectorAndDoEMFRegistration();
      this.disposableRegistry = injector.<DisposableRegistry>getInstance(DisposableRegistry.class);
      InputOutput.<String>println("Hi Homer");
      this.logg.info("Ejecutando RdlServlet.init()...");
      InputOutput.<String>println(("injector: " + injector));
      InputOutput.<String>println(("disposableRegistry: " + this.disposableRegistry));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Override
  public void destroy() {
    if ((this.disposableRegistry != null)) {
      this.disposableRegistry.dispose();
      this.disposableRegistry = null;
    }
    super.destroy();
  }
  
  /**
   * /
   */
  @Override
  protected void service(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException {
    final String pathDirectoryProject = (((File.separator + "src") + File.separator) + "rdl-directory");
    final String pathLogFile = (((((File.separator + "src") + File.separator) + "logs") + File.separator) + "log.txt");
    try {
      super.service(req, resp);
      final HttpServiceContext serviceContext = new HttpServiceContext(req);
      final String action = serviceContext.getParameter("job");
      final String resource = serviceContext.getParameter("resource");
      if (((!StringExtensions.isNullOrEmpty(action)) && action.equals("clone"))) {
        final String urlClone = serviceContext.getParameter("urlclone");
        final String msgClone = new UtilGIT().executorClone(urlClone, pathDirectoryProject, pathLogFile);
        resp.setContentType("text/plain");
        resp.getWriter().write(("myInit" + msgClone));
        InputOutput.<String>println("Finalizando la clonacion del proyecto...");
      } else {
        if (((!StringExtensions.isNullOrEmpty(action)) && action.equals("push"))) {
          InputOutput.<String>println("Iniciando git-push...");
          final String urlClone_1 = serviceContext.getParameter("urlclone");
          final String email = "javier.perezb@softtek.com";
          final String user = serviceContext.getParameter("user");
          final String pass = serviceContext.getParameter("password");
          final String msgPush = new UtilGIT().executorPush(pathDirectoryProject, pathLogFile, urlClone_1, email, user, pass);
          resp.setContentType("text/plain");
          resp.getWriter().write(("myInit" + msgPush));
          InputOutput.<String>println("Finalizando git-push...");
        } else {
          if (((!StringExtensions.isNullOrEmpty(action)) && action.equals("refresh"))) {
            InputOutput.<String>println("Iniciando refresh...");
            final String urlClone_2 = serviceContext.getParameter("urlclone");
            final String msgRefresh = new UtilGIT().executorRefresh(urlClone_2, pathDirectoryProject, pathLogFile);
            resp.setContentType("text/plain");
            resp.getWriter().write(("myInit" + msgRefresh));
            InputOutput.<String>println("Finalizando refresh...");
          } else {
            if (((!StringExtensions.isNullOrEmpty(action)) && action.equals("uploadfile"))) {
              final String pathFile = req.getParameter("pathfile");
              InputOutput.<String>println(("Iniciando upload file... pathFile: " + pathFile));
              final String contentFile = new UtilGIT().uploaderFile(pathDirectoryProject, pathFile);
              InputOutput.<String>println("Finalizando upload file...");
              resp.setContentType("text/plain");
              resp.getWriter().write(("myInit" + contentFile));
            } else {
              if (((!StringExtensions.isNullOrEmpty(action)) && action.equals("markUploadSelectedFile"))) {
                InputOutput.<String>println("Iniciando markUploadSelectedFile...");
                final String pathFile_1 = req.getParameter("pathfile");
                final String treeView = new UtilGIT().uploadTreeView(pathDirectoryProject, null, pathFile_1);
                InputOutput.<String>println("Finalizando markUploadSelectedFile...");
                resp.setContentType("text/plain");
                resp.getWriter().write(("myInit" + treeView));
              } else {
                if (((!StringExtensions.isNullOrEmpty(action)) && action.equals("save"))) {
                  final String pathFile_2 = serviceContext.getParameter("pathfile");
                  final String isNewRdl = serviceContext.getParameter("isNewRdl");
                  final String data = serviceContext.getParameter("fullText");
                  final String treeView_1 = new UtilGIT().saveFile(pathFile_2, data, pathDirectoryProject, isNewRdl);
                  resp.setContentType("text/plain");
                  resp.getWriter().write(("myInit" + treeView_1));
                } else {
                  if (((!StringExtensions.isNullOrEmpty(action)) && action.equals("load"))) {
                    InputOutput.<String>println("INVOCANDO METODO LOAD...");
                  }
                }
              }
            }
          }
        }
      }
    } catch (final Throwable _t) {
      if (_t instanceof InvalidRequestException.ResourceNotFoundException) {
        final InvalidRequestException.ResourceNotFoundException exception = (InvalidRequestException.ResourceNotFoundException)_t;
        String _requestURI = req.getRequestURI();
        String _plus = ("JPB 1 - Invalid request (" + _requestURI);
        String _plus_1 = (_plus + "): ");
        String _message = exception.getMessage();
        String _plus_2 = (_plus_1 + _message);
        this.logg.trace(_plus_2);
        resp.sendError(HttpServletResponse.SC_NOT_FOUND, exception.getMessage());
      } else if (_t instanceof InvalidRequestException.InvalidDocumentStateException) {
        final InvalidRequestException.InvalidDocumentStateException exception_1 = (InvalidRequestException.InvalidDocumentStateException)_t;
        String _requestURI_1 = req.getRequestURI();
        String _plus_3 = ("JPB 2 - Invalid request (" + _requestURI_1);
        String _plus_4 = (_plus_3 + "): ");
        String _message_1 = exception_1.getMessage();
        String _plus_5 = (_plus_4 + _message_1);
        this.logg.trace(_plus_5);
        resp.sendError(HttpServletResponse.SC_CONFLICT, exception_1.getMessage());
      } else if (_t instanceof InvalidRequestException.PermissionDeniedException) {
        final InvalidRequestException.PermissionDeniedException exception_2 = (InvalidRequestException.PermissionDeniedException)_t;
        String _requestURI_2 = req.getRequestURI();
        String _plus_6 = ("JPB 3 - Invalid request (" + _requestURI_2);
        String _plus_7 = (_plus_6 + "): ");
        String _message_2 = exception_2.getMessage();
        String _plus_8 = (_plus_7 + _message_2);
        this.logg.trace(_plus_8);
        resp.sendError(HttpServletResponse.SC_FORBIDDEN, exception_2.getMessage());
      } else if (_t instanceof InvalidRequestException) {
        final InvalidRequestException exception_3 = (InvalidRequestException)_t;
        String _requestURI_3 = req.getRequestURI();
        String _plus_9 = ("JPB 4 - Invalid request (" + _requestURI_3);
        String _plus_10 = (_plus_9 + "): ");
        String _message_3 = exception_3.getMessage();
        String _plus_11 = (_plus_10 + _message_3);
        this.logg.trace(_plus_11);
        resp.sendError(HttpServletResponse.SC_BAD_REQUEST, exception_3.getMessage());
      } else if (_t instanceof Exception) {
        final Exception exception_4 = (Exception)_t;
        String _requestURI_4 = req.getRequestURI();
        String _plus_12 = ("JPB 5 - Invalid request (" + _requestURI_4);
        String _plus_13 = (_plus_12 + "): ");
        String _message_4 = exception_4.getMessage();
        String _plus_14 = (_plus_13 + _message_4);
        this.logg.trace(_plus_14);
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
  }
}
