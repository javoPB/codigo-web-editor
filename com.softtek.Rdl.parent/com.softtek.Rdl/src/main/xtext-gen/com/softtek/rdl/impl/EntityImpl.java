/**
 * generated by Xtext 2.16.0
 */
package com.softtek.rdl.impl;

import com.softtek.rdl.Actions;
import com.softtek.rdl.DBMapEntity;
import com.softtek.rdl.Entity;
import com.softtek.rdl.EntityField;
import com.softtek.rdl.Glossary;
import com.softtek.rdl.MethodDeclaration;
import com.softtek.rdl.RdlPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Entity</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.softtek.rdl.impl.EntityImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.softtek.rdl.impl.EntityImpl#getActions <em>Actions</em>}</li>
 *   <li>{@link com.softtek.rdl.impl.EntityImpl#getGlossary <em>Glossary</em>}</li>
 *   <li>{@link com.softtek.rdl.impl.EntityImpl#getDb_map <em>Db map</em>}</li>
 *   <li>{@link com.softtek.rdl.impl.EntityImpl#getEntity_fields <em>Entity fields</em>}</li>
 *   <li>{@link com.softtek.rdl.impl.EntityImpl#getEntity_methods <em>Entity methods</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EntityImpl extends AbstractElementImpl implements Entity
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getActions() <em>Actions</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActions()
   * @generated
   * @ordered
   */
  protected Actions actions;

  /**
   * The cached value of the '{@link #getGlossary() <em>Glossary</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGlossary()
   * @generated
   * @ordered
   */
  protected Glossary glossary;

  /**
   * The cached value of the '{@link #getDb_map() <em>Db map</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDb_map()
   * @generated
   * @ordered
   */
  protected DBMapEntity db_map;

  /**
   * The cached value of the '{@link #getEntity_fields() <em>Entity fields</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntity_fields()
   * @generated
   * @ordered
   */
  protected EList<EntityField> entity_fields;

  /**
   * The cached value of the '{@link #getEntity_methods() <em>Entity methods</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntity_methods()
   * @generated
   * @ordered
   */
  protected EList<MethodDeclaration> entity_methods;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EntityImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RdlPackage.Literals.ENTITY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RdlPackage.ENTITY__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Actions getActions()
  {
    return actions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetActions(Actions newActions, NotificationChain msgs)
  {
    Actions oldActions = actions;
    actions = newActions;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RdlPackage.ENTITY__ACTIONS, oldActions, newActions);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setActions(Actions newActions)
  {
    if (newActions != actions)
    {
      NotificationChain msgs = null;
      if (actions != null)
        msgs = ((InternalEObject)actions).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RdlPackage.ENTITY__ACTIONS, null, msgs);
      if (newActions != null)
        msgs = ((InternalEObject)newActions).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RdlPackage.ENTITY__ACTIONS, null, msgs);
      msgs = basicSetActions(newActions, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RdlPackage.ENTITY__ACTIONS, newActions, newActions));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Glossary getGlossary()
  {
    return glossary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGlossary(Glossary newGlossary, NotificationChain msgs)
  {
    Glossary oldGlossary = glossary;
    glossary = newGlossary;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RdlPackage.ENTITY__GLOSSARY, oldGlossary, newGlossary);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGlossary(Glossary newGlossary)
  {
    if (newGlossary != glossary)
    {
      NotificationChain msgs = null;
      if (glossary != null)
        msgs = ((InternalEObject)glossary).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RdlPackage.ENTITY__GLOSSARY, null, msgs);
      if (newGlossary != null)
        msgs = ((InternalEObject)newGlossary).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RdlPackage.ENTITY__GLOSSARY, null, msgs);
      msgs = basicSetGlossary(newGlossary, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RdlPackage.ENTITY__GLOSSARY, newGlossary, newGlossary));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DBMapEntity getDb_map()
  {
    return db_map;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDb_map(DBMapEntity newDb_map, NotificationChain msgs)
  {
    DBMapEntity oldDb_map = db_map;
    db_map = newDb_map;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RdlPackage.ENTITY__DB_MAP, oldDb_map, newDb_map);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDb_map(DBMapEntity newDb_map)
  {
    if (newDb_map != db_map)
    {
      NotificationChain msgs = null;
      if (db_map != null)
        msgs = ((InternalEObject)db_map).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RdlPackage.ENTITY__DB_MAP, null, msgs);
      if (newDb_map != null)
        msgs = ((InternalEObject)newDb_map).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RdlPackage.ENTITY__DB_MAP, null, msgs);
      msgs = basicSetDb_map(newDb_map, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RdlPackage.ENTITY__DB_MAP, newDb_map, newDb_map));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<EntityField> getEntity_fields()
  {
    if (entity_fields == null)
    {
      entity_fields = new EObjectContainmentEList<EntityField>(EntityField.class, this, RdlPackage.ENTITY__ENTITY_FIELDS);
    }
    return entity_fields;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<MethodDeclaration> getEntity_methods()
  {
    if (entity_methods == null)
    {
      entity_methods = new EObjectContainmentEList<MethodDeclaration>(MethodDeclaration.class, this, RdlPackage.ENTITY__ENTITY_METHODS);
    }
    return entity_methods;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RdlPackage.ENTITY__ACTIONS:
        return basicSetActions(null, msgs);
      case RdlPackage.ENTITY__GLOSSARY:
        return basicSetGlossary(null, msgs);
      case RdlPackage.ENTITY__DB_MAP:
        return basicSetDb_map(null, msgs);
      case RdlPackage.ENTITY__ENTITY_FIELDS:
        return ((InternalEList<?>)getEntity_fields()).basicRemove(otherEnd, msgs);
      case RdlPackage.ENTITY__ENTITY_METHODS:
        return ((InternalEList<?>)getEntity_methods()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RdlPackage.ENTITY__NAME:
        return getName();
      case RdlPackage.ENTITY__ACTIONS:
        return getActions();
      case RdlPackage.ENTITY__GLOSSARY:
        return getGlossary();
      case RdlPackage.ENTITY__DB_MAP:
        return getDb_map();
      case RdlPackage.ENTITY__ENTITY_FIELDS:
        return getEntity_fields();
      case RdlPackage.ENTITY__ENTITY_METHODS:
        return getEntity_methods();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RdlPackage.ENTITY__NAME:
        setName((String)newValue);
        return;
      case RdlPackage.ENTITY__ACTIONS:
        setActions((Actions)newValue);
        return;
      case RdlPackage.ENTITY__GLOSSARY:
        setGlossary((Glossary)newValue);
        return;
      case RdlPackage.ENTITY__DB_MAP:
        setDb_map((DBMapEntity)newValue);
        return;
      case RdlPackage.ENTITY__ENTITY_FIELDS:
        getEntity_fields().clear();
        getEntity_fields().addAll((Collection<? extends EntityField>)newValue);
        return;
      case RdlPackage.ENTITY__ENTITY_METHODS:
        getEntity_methods().clear();
        getEntity_methods().addAll((Collection<? extends MethodDeclaration>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RdlPackage.ENTITY__NAME:
        setName(NAME_EDEFAULT);
        return;
      case RdlPackage.ENTITY__ACTIONS:
        setActions((Actions)null);
        return;
      case RdlPackage.ENTITY__GLOSSARY:
        setGlossary((Glossary)null);
        return;
      case RdlPackage.ENTITY__DB_MAP:
        setDb_map((DBMapEntity)null);
        return;
      case RdlPackage.ENTITY__ENTITY_FIELDS:
        getEntity_fields().clear();
        return;
      case RdlPackage.ENTITY__ENTITY_METHODS:
        getEntity_methods().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RdlPackage.ENTITY__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case RdlPackage.ENTITY__ACTIONS:
        return actions != null;
      case RdlPackage.ENTITY__GLOSSARY:
        return glossary != null;
      case RdlPackage.ENTITY__DB_MAP:
        return db_map != null;
      case RdlPackage.ENTITY__ENTITY_FIELDS:
        return entity_fields != null && !entity_fields.isEmpty();
      case RdlPackage.ENTITY__ENTITY_METHODS:
        return entity_methods != null && !entity_methods.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //EntityImpl
