/**
 * generated by Xtext 2.16.0
 */
package com.softtek.rdl.impl;

import com.softtek.rdl.Glossary;
import com.softtek.rdl.GlossaryDescription;
import com.softtek.rdl.GlossaryName;
import com.softtek.rdl.RdlPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Glossary</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.softtek.rdl.impl.GlossaryImpl#getGlossary_name <em>Glossary name</em>}</li>
 *   <li>{@link com.softtek.rdl.impl.GlossaryImpl#getGlossary_description <em>Glossary description</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GlossaryImpl extends MinimalEObjectImpl.Container implements Glossary
{
  /**
   * The cached value of the '{@link #getGlossary_name() <em>Glossary name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGlossary_name()
   * @generated
   * @ordered
   */
  protected GlossaryName glossary_name;

  /**
   * The cached value of the '{@link #getGlossary_description() <em>Glossary description</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGlossary_description()
   * @generated
   * @ordered
   */
  protected GlossaryDescription glossary_description;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GlossaryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RdlPackage.Literals.GLOSSARY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GlossaryName getGlossary_name()
  {
    return glossary_name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGlossary_name(GlossaryName newGlossary_name, NotificationChain msgs)
  {
    GlossaryName oldGlossary_name = glossary_name;
    glossary_name = newGlossary_name;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RdlPackage.GLOSSARY__GLOSSARY_NAME, oldGlossary_name, newGlossary_name);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGlossary_name(GlossaryName newGlossary_name)
  {
    if (newGlossary_name != glossary_name)
    {
      NotificationChain msgs = null;
      if (glossary_name != null)
        msgs = ((InternalEObject)glossary_name).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RdlPackage.GLOSSARY__GLOSSARY_NAME, null, msgs);
      if (newGlossary_name != null)
        msgs = ((InternalEObject)newGlossary_name).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RdlPackage.GLOSSARY__GLOSSARY_NAME, null, msgs);
      msgs = basicSetGlossary_name(newGlossary_name, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RdlPackage.GLOSSARY__GLOSSARY_NAME, newGlossary_name, newGlossary_name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GlossaryDescription getGlossary_description()
  {
    return glossary_description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGlossary_description(GlossaryDescription newGlossary_description, NotificationChain msgs)
  {
    GlossaryDescription oldGlossary_description = glossary_description;
    glossary_description = newGlossary_description;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RdlPackage.GLOSSARY__GLOSSARY_DESCRIPTION, oldGlossary_description, newGlossary_description);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGlossary_description(GlossaryDescription newGlossary_description)
  {
    if (newGlossary_description != glossary_description)
    {
      NotificationChain msgs = null;
      if (glossary_description != null)
        msgs = ((InternalEObject)glossary_description).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RdlPackage.GLOSSARY__GLOSSARY_DESCRIPTION, null, msgs);
      if (newGlossary_description != null)
        msgs = ((InternalEObject)newGlossary_description).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RdlPackage.GLOSSARY__GLOSSARY_DESCRIPTION, null, msgs);
      msgs = basicSetGlossary_description(newGlossary_description, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RdlPackage.GLOSSARY__GLOSSARY_DESCRIPTION, newGlossary_description, newGlossary_description));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RdlPackage.GLOSSARY__GLOSSARY_NAME:
        return basicSetGlossary_name(null, msgs);
      case RdlPackage.GLOSSARY__GLOSSARY_DESCRIPTION:
        return basicSetGlossary_description(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RdlPackage.GLOSSARY__GLOSSARY_NAME:
        return getGlossary_name();
      case RdlPackage.GLOSSARY__GLOSSARY_DESCRIPTION:
        return getGlossary_description();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RdlPackage.GLOSSARY__GLOSSARY_NAME:
        setGlossary_name((GlossaryName)newValue);
        return;
      case RdlPackage.GLOSSARY__GLOSSARY_DESCRIPTION:
        setGlossary_description((GlossaryDescription)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RdlPackage.GLOSSARY__GLOSSARY_NAME:
        setGlossary_name((GlossaryName)null);
        return;
      case RdlPackage.GLOSSARY__GLOSSARY_DESCRIPTION:
        setGlossary_description((GlossaryDescription)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RdlPackage.GLOSSARY__GLOSSARY_NAME:
        return glossary_name != null;
      case RdlPackage.GLOSSARY__GLOSSARY_DESCRIPTION:
        return glossary_description != null;
    }
    return super.eIsSet(featureID);
  }

} //GlossaryImpl
