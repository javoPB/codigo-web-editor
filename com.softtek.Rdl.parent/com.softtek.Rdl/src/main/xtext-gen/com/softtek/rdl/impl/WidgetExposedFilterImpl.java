/**
 * generated by Xtext 2.16.0
 */
package com.softtek.rdl.impl;

import com.softtek.rdl.RdlPackage;
import com.softtek.rdl.WidgetExposedFilter;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Widget Exposed Filter</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.softtek.rdl.impl.WidgetExposedFilterImpl#getExposed_filter <em>Exposed filter</em>}</li>
 * </ul>
 *
 * @generated
 */
public class WidgetExposedFilterImpl extends WidgetAttrImpl implements WidgetExposedFilter
{
  /**
   * The default value of the '{@link #getExposed_filter() <em>Exposed filter</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExposed_filter()
   * @generated
   * @ordered
   */
  protected static final String EXPOSED_FILTER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExposed_filter() <em>Exposed filter</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExposed_filter()
   * @generated
   * @ordered
   */
  protected String exposed_filter = EXPOSED_FILTER_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WidgetExposedFilterImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RdlPackage.Literals.WIDGET_EXPOSED_FILTER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getExposed_filter()
  {
    return exposed_filter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExposed_filter(String newExposed_filter)
  {
    String oldExposed_filter = exposed_filter;
    exposed_filter = newExposed_filter;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RdlPackage.WIDGET_EXPOSED_FILTER__EXPOSED_FILTER, oldExposed_filter, exposed_filter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RdlPackage.WIDGET_EXPOSED_FILTER__EXPOSED_FILTER:
        return getExposed_filter();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RdlPackage.WIDGET_EXPOSED_FILTER__EXPOSED_FILTER:
        setExposed_filter((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RdlPackage.WIDGET_EXPOSED_FILTER__EXPOSED_FILTER:
        setExposed_filter(EXPOSED_FILTER_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RdlPackage.WIDGET_EXPOSED_FILTER__EXPOSED_FILTER:
        return EXPOSED_FILTER_EDEFAULT == null ? exposed_filter != null : !EXPOSED_FILTER_EDEFAULT.equals(exposed_filter);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (exposed_filter: ");
    result.append(exposed_filter);
    result.append(')');
    return result.toString();
  }

} //WidgetExposedFilterImpl
