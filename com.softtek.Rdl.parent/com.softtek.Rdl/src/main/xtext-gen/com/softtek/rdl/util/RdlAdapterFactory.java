/**
 * generated by Xtext 2.16.0
 */
package com.softtek.rdl.util;

import com.softtek.rdl.AbstractElement;
import com.softtek.rdl.Action;
import com.softtek.rdl.ActionAdd;
import com.softtek.rdl.ActionDelete;
import com.softtek.rdl.ActionEdit;
import com.softtek.rdl.ActionSearch;
import com.softtek.rdl.Actions;
import com.softtek.rdl.BusinessRule;
import com.softtek.rdl.ConstraintMaxLength;
import com.softtek.rdl.ConstraintMinLength;
import com.softtek.rdl.ConstraintRequired;
import com.softtek.rdl.ConstraintUnique;
import com.softtek.rdl.DATE;
import com.softtek.rdl.DBMapAttr;
import com.softtek.rdl.DBMapAttrAutoId;
import com.softtek.rdl.DBMapAttrIdentity;
import com.softtek.rdl.DBMapEntity;
import com.softtek.rdl.DBMapField;
import com.softtek.rdl.DataDomain;
import com.softtek.rdl.Entity;
import com.softtek.rdl.EntityAttr;
import com.softtek.rdl.EntityCurrencyField;
import com.softtek.rdl.EntityDateField;
import com.softtek.rdl.EntityDateFieldAttr;
import com.softtek.rdl.EntityDecimalField;
import com.softtek.rdl.EntityEmailField;
import com.softtek.rdl.EntityField;
import com.softtek.rdl.EntityFileField;
import com.softtek.rdl.EntityImageField;
import com.softtek.rdl.EntityIntegerField;
import com.softtek.rdl.EntityLongTextField;
import com.softtek.rdl.EntityLongTextFieldAttr;
import com.softtek.rdl.EntityReferenceField;
import com.softtek.rdl.EntityReferenceFieldAttr;
import com.softtek.rdl.EntityTextConstraint;
import com.softtek.rdl.EntityTextConstraintDef;
import com.softtek.rdl.EntityTextField;
import com.softtek.rdl.EntityTextFieldAttr;
import com.softtek.rdl.EnumEntity;
import com.softtek.rdl.EnumLiteral;
import com.softtek.rdl.Glossary;
import com.softtek.rdl.GlossaryDescription;
import com.softtek.rdl.GlossaryName;
import com.softtek.rdl.MethodDeclaration;
import com.softtek.rdl.Model;
import com.softtek.rdl.Module;
import com.softtek.rdl.RdlPackage;
import com.softtek.rdl.Statement;
import com.softtek.rdl.StatementReturn;
import com.softtek.rdl.Widget;
import com.softtek.rdl.WidgetAttr;
import com.softtek.rdl.WidgetAttrDate;
import com.softtek.rdl.WidgetAttrEnum;
import com.softtek.rdl.WidgetAttrEnumType;
import com.softtek.rdl.WidgetAttrEnumTypeSelect;
import com.softtek.rdl.WidgetAttrText;
import com.softtek.rdl.WidgetDate;
import com.softtek.rdl.WidgetDisplayResult;
import com.softtek.rdl.WidgetEndYear;
import com.softtek.rdl.WidgetEnum;
import com.softtek.rdl.WidgetExposedFilter;
import com.softtek.rdl.WidgetHelp;
import com.softtek.rdl.WidgetLabel;
import com.softtek.rdl.WidgetSize;
import com.softtek.rdl.WidgetSortBy;
import com.softtek.rdl.WidgetStartYear;
import com.softtek.rdl.WidgetText;
import com.softtek.rdl.WidgetType;
import com.softtek.rdl.WidgetTypeSelect;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.softtek.rdl.RdlPackage
 * @generated
 */
public class RdlAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static RdlPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RdlAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = RdlPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RdlSwitch<Adapter> modelSwitch =
    new RdlSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseModule(Module object)
      {
        return createModuleAdapter();
      }
      @Override
      public Adapter caseAbstractElement(AbstractElement object)
      {
        return createAbstractElementAdapter();
      }
      @Override
      public Adapter caseEnum(com.softtek.rdl.Enum object)
      {
        return createEnumAdapter();
      }
      @Override
      public Adapter caseEnumLiteral(EnumLiteral object)
      {
        return createEnumLiteralAdapter();
      }
      @Override
      public Adapter caseEntity(Entity object)
      {
        return createEntityAdapter();
      }
      @Override
      public Adapter caseMethodDeclaration(MethodDeclaration object)
      {
        return createMethodDeclarationAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseStatementReturn(StatementReturn object)
      {
        return createStatementReturnAdapter();
      }
      @Override
      public Adapter caseEntityField(EntityField object)
      {
        return createEntityFieldAdapter();
      }
      @Override
      public Adapter caseEntityTextConstraintDef(EntityTextConstraintDef object)
      {
        return createEntityTextConstraintDefAdapter();
      }
      @Override
      public Adapter caseEntityTextConstraint(EntityTextConstraint object)
      {
        return createEntityTextConstraintAdapter();
      }
      @Override
      public Adapter caseEntityTextField(EntityTextField object)
      {
        return createEntityTextFieldAdapter();
      }
      @Override
      public Adapter caseEntityTextFieldAttr(EntityTextFieldAttr object)
      {
        return createEntityTextFieldAttrAdapter();
      }
      @Override
      public Adapter caseEntityLongTextField(EntityLongTextField object)
      {
        return createEntityLongTextFieldAdapter();
      }
      @Override
      public Adapter caseEntityLongTextFieldAttr(EntityLongTextFieldAttr object)
      {
        return createEntityLongTextFieldAttrAdapter();
      }
      @Override
      public Adapter caseEntityDateField(EntityDateField object)
      {
        return createEntityDateFieldAdapter();
      }
      @Override
      public Adapter caseEntityDateFieldAttr(EntityDateFieldAttr object)
      {
        return createEntityDateFieldAttrAdapter();
      }
      @Override
      public Adapter caseEntityReferenceField(EntityReferenceField object)
      {
        return createEntityReferenceFieldAdapter();
      }
      @Override
      public Adapter caseEntityReferenceFieldAttr(EntityReferenceFieldAttr object)
      {
        return createEntityReferenceFieldAttrAdapter();
      }
      @Override
      public Adapter caseEnumEntity(EnumEntity object)
      {
        return createEnumEntityAdapter();
      }
      @Override
      public Adapter caseEntityImageField(EntityImageField object)
      {
        return createEntityImageFieldAdapter();
      }
      @Override
      public Adapter caseEntityFileField(EntityFileField object)
      {
        return createEntityFileFieldAdapter();
      }
      @Override
      public Adapter caseEntityEmailField(EntityEmailField object)
      {
        return createEntityEmailFieldAdapter();
      }
      @Override
      public Adapter caseEntityDecimalField(EntityDecimalField object)
      {
        return createEntityDecimalFieldAdapter();
      }
      @Override
      public Adapter caseEntityIntegerField(EntityIntegerField object)
      {
        return createEntityIntegerFieldAdapter();
      }
      @Override
      public Adapter caseEntityCurrencyField(EntityCurrencyField object)
      {
        return createEntityCurrencyFieldAdapter();
      }
      @Override
      public Adapter caseEntityAttr(EntityAttr object)
      {
        return createEntityAttrAdapter();
      }
      @Override
      public Adapter caseConstraintRequired(ConstraintRequired object)
      {
        return createConstraintRequiredAdapter();
      }
      @Override
      public Adapter caseConstraintUnique(ConstraintUnique object)
      {
        return createConstraintUniqueAdapter();
      }
      @Override
      public Adapter caseConstraintMaxLength(ConstraintMaxLength object)
      {
        return createConstraintMaxLengthAdapter();
      }
      @Override
      public Adapter caseConstraintMinLength(ConstraintMinLength object)
      {
        return createConstraintMinLengthAdapter();
      }
      @Override
      public Adapter caseGlossary(Glossary object)
      {
        return createGlossaryAdapter();
      }
      @Override
      public Adapter caseGlossaryName(GlossaryName object)
      {
        return createGlossaryNameAdapter();
      }
      @Override
      public Adapter caseGlossaryDescription(GlossaryDescription object)
      {
        return createGlossaryDescriptionAdapter();
      }
      @Override
      public Adapter caseWidgetLabel(WidgetLabel object)
      {
        return createWidgetLabelAdapter();
      }
      @Override
      public Adapter caseWidgetHelp(WidgetHelp object)
      {
        return createWidgetHelpAdapter();
      }
      @Override
      public Adapter caseWidgetExposedFilter(WidgetExposedFilter object)
      {
        return createWidgetExposedFilterAdapter();
      }
      @Override
      public Adapter caseWidgetType(WidgetType object)
      {
        return createWidgetTypeAdapter();
      }
      @Override
      public Adapter caseWidgetTypeSelect(WidgetTypeSelect object)
      {
        return createWidgetTypeSelectAdapter();
      }
      @Override
      public Adapter caseWidgetSortBy(WidgetSortBy object)
      {
        return createWidgetSortByAdapter();
      }
      @Override
      public Adapter caseWidgetStartYear(WidgetStartYear object)
      {
        return createWidgetStartYearAdapter();
      }
      @Override
      public Adapter caseWidgetEndYear(WidgetEndYear object)
      {
        return createWidgetEndYearAdapter();
      }
      @Override
      public Adapter caseWidget(Widget object)
      {
        return createWidgetAdapter();
      }
      @Override
      public Adapter caseWidgetEnum(WidgetEnum object)
      {
        return createWidgetEnumAdapter();
      }
      @Override
      public Adapter caseWidgetDate(WidgetDate object)
      {
        return createWidgetDateAdapter();
      }
      @Override
      public Adapter caseWidgetText(WidgetText object)
      {
        return createWidgetTextAdapter();
      }
      @Override
      public Adapter caseWidgetAttr(WidgetAttr object)
      {
        return createWidgetAttrAdapter();
      }
      @Override
      public Adapter caseWidgetAttrEnum(WidgetAttrEnum object)
      {
        return createWidgetAttrEnumAdapter();
      }
      @Override
      public Adapter caseWidgetAttrEnumType(WidgetAttrEnumType object)
      {
        return createWidgetAttrEnumTypeAdapter();
      }
      @Override
      public Adapter caseWidgetAttrEnumTypeSelect(WidgetAttrEnumTypeSelect object)
      {
        return createWidgetAttrEnumTypeSelectAdapter();
      }
      @Override
      public Adapter caseWidgetAttrDate(WidgetAttrDate object)
      {
        return createWidgetAttrDateAdapter();
      }
      @Override
      public Adapter caseWidgetAttrText(WidgetAttrText object)
      {
        return createWidgetAttrTextAdapter();
      }
      @Override
      public Adapter caseWidgetSize(WidgetSize object)
      {
        return createWidgetSizeAdapter();
      }
      @Override
      public Adapter caseWidgetDisplayResult(WidgetDisplayResult object)
      {
        return createWidgetDisplayResultAdapter();
      }
      @Override
      public Adapter caseDATE(DATE object)
      {
        return createDATEAdapter();
      }
      @Override
      public Adapter caseActionSearch(ActionSearch object)
      {
        return createActionSearchAdapter();
      }
      @Override
      public Adapter caseActionAdd(ActionAdd object)
      {
        return createActionAddAdapter();
      }
      @Override
      public Adapter caseActionEdit(ActionEdit object)
      {
        return createActionEditAdapter();
      }
      @Override
      public Adapter caseActionDelete(ActionDelete object)
      {
        return createActionDeleteAdapter();
      }
      @Override
      public Adapter caseAction(Action object)
      {
        return createActionAdapter();
      }
      @Override
      public Adapter caseActions(Actions object)
      {
        return createActionsAdapter();
      }
      @Override
      public Adapter caseDBMapEntity(DBMapEntity object)
      {
        return createDBMapEntityAdapter();
      }
      @Override
      public Adapter caseDBMapAttr(DBMapAttr object)
      {
        return createDBMapAttrAdapter();
      }
      @Override
      public Adapter caseDBMapAttrIdentity(DBMapAttrIdentity object)
      {
        return createDBMapAttrIdentityAdapter();
      }
      @Override
      public Adapter caseDBMapAttrAutoId(DBMapAttrAutoId object)
      {
        return createDBMapAttrAutoIdAdapter();
      }
      @Override
      public Adapter caseDBMapField(DBMapField object)
      {
        return createDBMapFieldAdapter();
      }
      @Override
      public Adapter caseDataDomain(DataDomain object)
      {
        return createDataDomainAdapter();
      }
      @Override
      public Adapter caseBusinessRule(BusinessRule object)
      {
        return createBusinessRuleAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.Module <em>Module</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.Module
   * @generated
   */
  public Adapter createModuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.AbstractElement <em>Abstract Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.AbstractElement
   * @generated
   */
  public Adapter createAbstractElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.Enum <em>Enum</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.Enum
   * @generated
   */
  public Adapter createEnumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.EnumLiteral <em>Enum Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.EnumLiteral
   * @generated
   */
  public Adapter createEnumLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.Entity <em>Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.Entity
   * @generated
   */
  public Adapter createEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.MethodDeclaration <em>Method Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.MethodDeclaration
   * @generated
   */
  public Adapter createMethodDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.StatementReturn <em>Statement Return</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.StatementReturn
   * @generated
   */
  public Adapter createStatementReturnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.EntityField <em>Entity Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.EntityField
   * @generated
   */
  public Adapter createEntityFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.EntityTextConstraintDef <em>Entity Text Constraint Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.EntityTextConstraintDef
   * @generated
   */
  public Adapter createEntityTextConstraintDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.EntityTextConstraint <em>Entity Text Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.EntityTextConstraint
   * @generated
   */
  public Adapter createEntityTextConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.EntityTextField <em>Entity Text Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.EntityTextField
   * @generated
   */
  public Adapter createEntityTextFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.EntityTextFieldAttr <em>Entity Text Field Attr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.EntityTextFieldAttr
   * @generated
   */
  public Adapter createEntityTextFieldAttrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.EntityLongTextField <em>Entity Long Text Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.EntityLongTextField
   * @generated
   */
  public Adapter createEntityLongTextFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.EntityLongTextFieldAttr <em>Entity Long Text Field Attr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.EntityLongTextFieldAttr
   * @generated
   */
  public Adapter createEntityLongTextFieldAttrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.EntityDateField <em>Entity Date Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.EntityDateField
   * @generated
   */
  public Adapter createEntityDateFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.EntityDateFieldAttr <em>Entity Date Field Attr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.EntityDateFieldAttr
   * @generated
   */
  public Adapter createEntityDateFieldAttrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.EntityReferenceField <em>Entity Reference Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.EntityReferenceField
   * @generated
   */
  public Adapter createEntityReferenceFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.EntityReferenceFieldAttr <em>Entity Reference Field Attr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.EntityReferenceFieldAttr
   * @generated
   */
  public Adapter createEntityReferenceFieldAttrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.EnumEntity <em>Enum Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.EnumEntity
   * @generated
   */
  public Adapter createEnumEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.EntityImageField <em>Entity Image Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.EntityImageField
   * @generated
   */
  public Adapter createEntityImageFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.EntityFileField <em>Entity File Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.EntityFileField
   * @generated
   */
  public Adapter createEntityFileFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.EntityEmailField <em>Entity Email Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.EntityEmailField
   * @generated
   */
  public Adapter createEntityEmailFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.EntityDecimalField <em>Entity Decimal Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.EntityDecimalField
   * @generated
   */
  public Adapter createEntityDecimalFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.EntityIntegerField <em>Entity Integer Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.EntityIntegerField
   * @generated
   */
  public Adapter createEntityIntegerFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.EntityCurrencyField <em>Entity Currency Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.EntityCurrencyField
   * @generated
   */
  public Adapter createEntityCurrencyFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.EntityAttr <em>Entity Attr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.EntityAttr
   * @generated
   */
  public Adapter createEntityAttrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.ConstraintRequired <em>Constraint Required</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.ConstraintRequired
   * @generated
   */
  public Adapter createConstraintRequiredAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.ConstraintUnique <em>Constraint Unique</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.ConstraintUnique
   * @generated
   */
  public Adapter createConstraintUniqueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.ConstraintMaxLength <em>Constraint Max Length</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.ConstraintMaxLength
   * @generated
   */
  public Adapter createConstraintMaxLengthAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.ConstraintMinLength <em>Constraint Min Length</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.ConstraintMinLength
   * @generated
   */
  public Adapter createConstraintMinLengthAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.Glossary <em>Glossary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.Glossary
   * @generated
   */
  public Adapter createGlossaryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.GlossaryName <em>Glossary Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.GlossaryName
   * @generated
   */
  public Adapter createGlossaryNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.GlossaryDescription <em>Glossary Description</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.GlossaryDescription
   * @generated
   */
  public Adapter createGlossaryDescriptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.WidgetLabel <em>Widget Label</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.WidgetLabel
   * @generated
   */
  public Adapter createWidgetLabelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.WidgetHelp <em>Widget Help</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.WidgetHelp
   * @generated
   */
  public Adapter createWidgetHelpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.WidgetExposedFilter <em>Widget Exposed Filter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.WidgetExposedFilter
   * @generated
   */
  public Adapter createWidgetExposedFilterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.WidgetType <em>Widget Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.WidgetType
   * @generated
   */
  public Adapter createWidgetTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.WidgetTypeSelect <em>Widget Type Select</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.WidgetTypeSelect
   * @generated
   */
  public Adapter createWidgetTypeSelectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.WidgetSortBy <em>Widget Sort By</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.WidgetSortBy
   * @generated
   */
  public Adapter createWidgetSortByAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.WidgetStartYear <em>Widget Start Year</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.WidgetStartYear
   * @generated
   */
  public Adapter createWidgetStartYearAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.WidgetEndYear <em>Widget End Year</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.WidgetEndYear
   * @generated
   */
  public Adapter createWidgetEndYearAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.Widget <em>Widget</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.Widget
   * @generated
   */
  public Adapter createWidgetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.WidgetEnum <em>Widget Enum</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.WidgetEnum
   * @generated
   */
  public Adapter createWidgetEnumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.WidgetDate <em>Widget Date</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.WidgetDate
   * @generated
   */
  public Adapter createWidgetDateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.WidgetText <em>Widget Text</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.WidgetText
   * @generated
   */
  public Adapter createWidgetTextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.WidgetAttr <em>Widget Attr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.WidgetAttr
   * @generated
   */
  public Adapter createWidgetAttrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.WidgetAttrEnum <em>Widget Attr Enum</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.WidgetAttrEnum
   * @generated
   */
  public Adapter createWidgetAttrEnumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.WidgetAttrEnumType <em>Widget Attr Enum Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.WidgetAttrEnumType
   * @generated
   */
  public Adapter createWidgetAttrEnumTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.WidgetAttrEnumTypeSelect <em>Widget Attr Enum Type Select</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.WidgetAttrEnumTypeSelect
   * @generated
   */
  public Adapter createWidgetAttrEnumTypeSelectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.WidgetAttrDate <em>Widget Attr Date</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.WidgetAttrDate
   * @generated
   */
  public Adapter createWidgetAttrDateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.WidgetAttrText <em>Widget Attr Text</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.WidgetAttrText
   * @generated
   */
  public Adapter createWidgetAttrTextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.WidgetSize <em>Widget Size</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.WidgetSize
   * @generated
   */
  public Adapter createWidgetSizeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.WidgetDisplayResult <em>Widget Display Result</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.WidgetDisplayResult
   * @generated
   */
  public Adapter createWidgetDisplayResultAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.DATE <em>DATE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.DATE
   * @generated
   */
  public Adapter createDATEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.ActionSearch <em>Action Search</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.ActionSearch
   * @generated
   */
  public Adapter createActionSearchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.ActionAdd <em>Action Add</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.ActionAdd
   * @generated
   */
  public Adapter createActionAddAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.ActionEdit <em>Action Edit</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.ActionEdit
   * @generated
   */
  public Adapter createActionEditAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.ActionDelete <em>Action Delete</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.ActionDelete
   * @generated
   */
  public Adapter createActionDeleteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.Action <em>Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.Action
   * @generated
   */
  public Adapter createActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.Actions <em>Actions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.Actions
   * @generated
   */
  public Adapter createActionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.DBMapEntity <em>DB Map Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.DBMapEntity
   * @generated
   */
  public Adapter createDBMapEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.DBMapAttr <em>DB Map Attr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.DBMapAttr
   * @generated
   */
  public Adapter createDBMapAttrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.DBMapAttrIdentity <em>DB Map Attr Identity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.DBMapAttrIdentity
   * @generated
   */
  public Adapter createDBMapAttrIdentityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.DBMapAttrAutoId <em>DB Map Attr Auto Id</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.DBMapAttrAutoId
   * @generated
   */
  public Adapter createDBMapAttrAutoIdAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.DBMapField <em>DB Map Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.DBMapField
   * @generated
   */
  public Adapter createDBMapFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.DataDomain <em>Data Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.DataDomain
   * @generated
   */
  public Adapter createDataDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.softtek.rdl.BusinessRule <em>Business Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.softtek.rdl.BusinessRule
   * @generated
   */
  public Adapter createBusinessRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //RdlAdapterFactory
