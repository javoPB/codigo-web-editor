/*
 * generated by Xtext 2.16.0
 */
package com.softtek.serializer;

import com.google.inject.Inject;
import com.softtek.services.RdlGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class RdlSyntacticSequencer extends AbstractSyntacticSequencer {

	protected RdlGrammarAccess grammarAccess;
	protected AbstractElementAlias match_WidgetEndYear_PlusSignKeyword_4_q;
	protected AbstractElementAlias match_WidgetStartYear_PlusSignKeyword_4_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (RdlGrammarAccess) access;
		match_WidgetEndYear_PlusSignKeyword_4_q = new TokenAlias(false, true, grammarAccess.getWidgetEndYearAccess().getPlusSignKeyword_4());
		match_WidgetStartYear_PlusSignKeyword_4_q = new TokenAlias(false, true, grammarAccess.getWidgetStartYearAccess().getPlusSignKeyword_4());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal INT returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_WidgetEndYear_PlusSignKeyword_4_q.equals(syntax))
				emit_WidgetEndYear_PlusSignKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_WidgetStartYear_PlusSignKeyword_4_q.equals(syntax))
				emit_WidgetStartYear_PlusSignKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '+'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'end_year_from_now' ':' (ambiguity) INT (rule start)
	 *     end='-' (ambiguity) INT (rule end)
	 */
	protected void emit_WidgetEndYear_PlusSignKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '+'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'start_year_from_now' ':' (ambiguity) INT (rule start)
	 *     start='-' (ambiguity) INT (rule end)
	 */
	protected void emit_WidgetStartYear_PlusSignKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
