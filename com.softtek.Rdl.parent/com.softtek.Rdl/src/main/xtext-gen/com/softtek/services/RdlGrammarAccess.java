/*
 * generated by Xtext 2.16.0
 */
package com.softtek.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RdlGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.Model");
		private final Assignment cModuleAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cModuleModuleParserRuleCall_0 = (RuleCall)cModuleAssignment.eContents().get(0);
		
		//Model:
		//	module=Module;
		@Override public ParserRule getRule() { return rule; }
		
		//module=Module
		public Assignment getModuleAssignment() { return cModuleAssignment; }
		
		//Module
		public RuleCall getModuleModuleParserRuleCall_0() { return cModuleModuleParserRuleCall_0; }
	}
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsAbstractElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Module:
		//	'module' name=QualifiedName '{'
		//	elements+=AbstractElement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'module' name=QualifiedName '{' elements+=AbstractElement* '}'
		public Group getGroup() { return cGroup; }
		
		//'module'
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_3_0() { return cElementsAbstractElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractElement:
		//	Enum | Entity;
		@Override public ParserRule getRule() { return rule; }
		
		//Enum | Entity
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Enum
		public RuleCall getEnumParserRuleCall_0() { return cEnumParserRuleCall_0; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_1() { return cEntityParserRuleCall_1; }
	}
	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEnum_literalsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEnum_literalsEnumLiteralParserRuleCall_3_0 = (RuleCall)cEnum_literalsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Enum:
		//	'enum' name=ID '{'
		//	enum_literals+=EnumLiteral+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'enum' name=ID '{' enum_literals+=EnumLiteral+ '}'
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//enum_literals+=EnumLiteral+
		public Assignment getEnum_literalsAssignment_3() { return cEnum_literalsAssignment_3; }
		
		//EnumLiteral
		public RuleCall getEnum_literalsEnumLiteralParserRuleCall_3_0() { return cEnum_literalsEnumLiteralParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EnumLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.EnumLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//EnumLiteral:
		//	key=ID ':' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//key=ID ':' value=STRING
		public Group getGroup() { return cGroup; }
		
		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionsActionsParserRuleCall_3_0 = (RuleCall)cActionsAssignment_3.eContents().get(0);
		private final Assignment cGlossaryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGlossaryGlossaryParserRuleCall_4_0 = (RuleCall)cGlossaryAssignment_4.eContents().get(0);
		private final Assignment cDb_mapAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDb_mapDBMapEntityParserRuleCall_5_0 = (RuleCall)cDb_mapAssignment_5.eContents().get(0);
		private final Assignment cEntity_fieldsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEntity_fieldsEntityFieldParserRuleCall_6_0 = (RuleCall)cEntity_fieldsAssignment_6.eContents().get(0);
		private final Assignment cEntity_methodsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEntity_methodsMethodDeclarationParserRuleCall_7_0 = (RuleCall)cEntity_methodsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Entity:
		//	'entity' name=ID '{'
		//	actions=Actions?
		//	glossary=Glossary?
		//	db_map=DBMapEntity?
		//	entity_fields+=EntityField+
		//	entity_methods+=MethodDeclaration*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID '{' actions=Actions? glossary=Glossary? db_map=DBMapEntity? entity_fields+=EntityField+
		//entity_methods+=MethodDeclaration* '}'
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//actions=Actions?
		public Assignment getActionsAssignment_3() { return cActionsAssignment_3; }
		
		//Actions
		public RuleCall getActionsActionsParserRuleCall_3_0() { return cActionsActionsParserRuleCall_3_0; }
		
		//glossary=Glossary?
		public Assignment getGlossaryAssignment_4() { return cGlossaryAssignment_4; }
		
		//Glossary
		public RuleCall getGlossaryGlossaryParserRuleCall_4_0() { return cGlossaryGlossaryParserRuleCall_4_0; }
		
		//db_map=DBMapEntity?
		public Assignment getDb_mapAssignment_5() { return cDb_mapAssignment_5; }
		
		//DBMapEntity
		public RuleCall getDb_mapDBMapEntityParserRuleCall_5_0() { return cDb_mapDBMapEntityParserRuleCall_5_0; }
		
		//entity_fields+=EntityField+
		public Assignment getEntity_fieldsAssignment_6() { return cEntity_fieldsAssignment_6; }
		
		//EntityField
		public RuleCall getEntity_fieldsEntityFieldParserRuleCall_6_0() { return cEntity_fieldsEntityFieldParserRuleCall_6_0; }
		
		//entity_methods+=MethodDeclaration*
		public Assignment getEntity_methodsAssignment_7() { return cEntity_methodsAssignment_7; }
		
		//MethodDeclaration
		public RuleCall getEntity_methodsMethodDeclarationParserRuleCall_7_0() { return cEntity_methodsMethodDeclarationParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class MethodDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.MethodDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDef_statementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDef_statementsStatementParserRuleCall_3_0 = (RuleCall)cDef_statementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MethodDeclaration:
		//	'def' name=ID '{'
		//	def_statements+=Statement+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'def' name=ID '{' def_statements+=Statement+ '}'
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//def_statements+=Statement+
		public Assignment getDef_statementsAssignment_3() { return cDef_statementsAssignment_3; }
		
		//Statement
		public RuleCall getDef_statementsStatementParserRuleCall_3_0() { return cDef_statementsStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.Statement");
		private final RuleCall cStatementReturnParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Statement:
		//	StatementReturn;
		@Override public ParserRule getRule() { return rule; }
		
		//StatementReturn
		public RuleCall getStatementReturnParserRuleCall() { return cStatementReturnParserRuleCall; }
	}
	public class StatementReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.StatementReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntityfieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEntityfieldEntityFieldCrossReference_1_0 = (CrossReference)cEntityfieldAssignment_1.eContents().get(0);
		private final RuleCall cEntityfieldEntityFieldQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cEntityfieldEntityFieldCrossReference_1_0.eContents().get(1);
		
		//StatementReturn:
		//	'return' entityfield=[EntityField|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//'return' entityfield=[EntityField|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//entityfield=[EntityField|QualifiedName]
		public Assignment getEntityfieldAssignment_1() { return cEntityfieldAssignment_1; }
		
		//[EntityField|QualifiedName]
		public CrossReference getEntityfieldEntityFieldCrossReference_1_0() { return cEntityfieldEntityFieldCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getEntityfieldEntityFieldQualifiedNameParserRuleCall_1_0_1() { return cEntityfieldEntityFieldQualifiedNameParserRuleCall_1_0_1; }
	}
	public class EntityFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.EntityField");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityReferenceFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityTextFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEntityLongTextFieldParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEntityDateFieldParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEntityImageFieldParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEntityFileFieldParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEntityEmailFieldParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEntityDecimalFieldParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cEntityIntegerFieldParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cEntityCurrencyFieldParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//EntityField:
		//	EntityReferenceField | EntityTextField | EntityLongTextField | EntityDateField | EntityImageField | EntityFileField |
		//	EntityEmailField | EntityDecimalField | EntityIntegerField | EntityCurrencyField;
		@Override public ParserRule getRule() { return rule; }
		
		//EntityReferenceField | EntityTextField | EntityLongTextField | EntityDateField | EntityImageField | EntityFileField |
		//EntityEmailField | EntityDecimalField | EntityIntegerField | EntityCurrencyField
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EntityReferenceField
		public RuleCall getEntityReferenceFieldParserRuleCall_0() { return cEntityReferenceFieldParserRuleCall_0; }
		
		//EntityTextField
		public RuleCall getEntityTextFieldParserRuleCall_1() { return cEntityTextFieldParserRuleCall_1; }
		
		//EntityLongTextField
		public RuleCall getEntityLongTextFieldParserRuleCall_2() { return cEntityLongTextFieldParserRuleCall_2; }
		
		//EntityDateField
		public RuleCall getEntityDateFieldParserRuleCall_3() { return cEntityDateFieldParserRuleCall_3; }
		
		//EntityImageField
		public RuleCall getEntityImageFieldParserRuleCall_4() { return cEntityImageFieldParserRuleCall_4; }
		
		//EntityFileField
		public RuleCall getEntityFileFieldParserRuleCall_5() { return cEntityFileFieldParserRuleCall_5; }
		
		//EntityEmailField
		public RuleCall getEntityEmailFieldParserRuleCall_6() { return cEntityEmailFieldParserRuleCall_6; }
		
		//EntityDecimalField
		public RuleCall getEntityDecimalFieldParserRuleCall_7() { return cEntityDecimalFieldParserRuleCall_7; }
		
		//EntityIntegerField
		public RuleCall getEntityIntegerFieldParserRuleCall_8() { return cEntityIntegerFieldParserRuleCall_8; }
		
		//EntityCurrencyField
		public RuleCall getEntityCurrencyFieldParserRuleCall_9() { return cEntityCurrencyFieldParserRuleCall_9; }
	}
	public class EntityTextConstraintDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.EntityTextConstraintDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstraintsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintsEntityTextConstraintParserRuleCall_2_0 = (RuleCall)cConstraintsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConstraintsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConstraintsEntityTextConstraintParserRuleCall_3_1_0 = (RuleCall)cConstraintsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EntityTextConstraintDef:
		//	'constraints' '(' constraints+=EntityTextConstraint (',' constraints+=EntityTextConstraint)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'constraints' '(' constraints+=EntityTextConstraint (',' constraints+=EntityTextConstraint)* ')'
		public Group getGroup() { return cGroup; }
		
		//'constraints'
		public Keyword getConstraintsKeyword_0() { return cConstraintsKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//constraints+=EntityTextConstraint
		public Assignment getConstraintsAssignment_2() { return cConstraintsAssignment_2; }
		
		//EntityTextConstraint
		public RuleCall getConstraintsEntityTextConstraintParserRuleCall_2_0() { return cConstraintsEntityTextConstraintParserRuleCall_2_0; }
		
		//(',' constraints+=EntityTextConstraint)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//constraints+=EntityTextConstraint
		public Assignment getConstraintsAssignment_3_1() { return cConstraintsAssignment_3_1; }
		
		//EntityTextConstraint
		public RuleCall getConstraintsEntityTextConstraintParserRuleCall_3_1_0() { return cConstraintsEntityTextConstraintParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EntityTextConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.EntityTextConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstraintRequiredParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstraintUniqueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstraintMaxLengthParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConstraintMinLengthParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//EntityTextConstraint:
		//	ConstraintRequired | ConstraintUnique | ConstraintMaxLength | ConstraintMinLength;
		@Override public ParserRule getRule() { return rule; }
		
		//ConstraintRequired | ConstraintUnique | ConstraintMaxLength | ConstraintMinLength
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConstraintRequired
		public RuleCall getConstraintRequiredParserRuleCall_0() { return cConstraintRequiredParserRuleCall_0; }
		
		//ConstraintUnique
		public RuleCall getConstraintUniqueParserRuleCall_1() { return cConstraintUniqueParserRuleCall_1; }
		
		//ConstraintMaxLength
		public RuleCall getConstraintMaxLengthParserRuleCall_2() { return cConstraintMaxLengthParserRuleCall_2; }
		
		//ConstraintMinLength
		public RuleCall getConstraintMinLengthParserRuleCall_3() { return cConstraintMinLengthParserRuleCall_3; }
	}
	public class EntityTextFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.EntityTextField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTextKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAttrsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttrsEntityTextFieldAttrParserRuleCall_4_1_0 = (RuleCall)cAttrsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//EntityTextField:
		//	'field' name=ID ':' 'Text' ('{'
		//	attrs+=EntityTextFieldAttr+
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'field' name=ID ':' 'Text' ('{' attrs+=EntityTextFieldAttr+ '}')?
		public Group getGroup() { return cGroup; }
		
		//'field'
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'Text'
		public Keyword getTextKeyword_3() { return cTextKeyword_3; }
		
		//('{' attrs+=EntityTextFieldAttr+ '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//attrs+=EntityTextFieldAttr+
		public Assignment getAttrsAssignment_4_1() { return cAttrsAssignment_4_1; }
		
		//EntityTextFieldAttr
		public RuleCall getAttrsEntityTextFieldAttrParserRuleCall_4_1_0() { return cAttrsEntityTextFieldAttrParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class EntityTextFieldAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.EntityTextFieldAttr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGlossaryAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cGlossaryGlossaryParserRuleCall_0_0 = (RuleCall)cGlossaryAssignment_0.eContents().get(0);
		private final Assignment cWidgetAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cWidgetWidgetTextParserRuleCall_1_0 = (RuleCall)cWidgetAssignment_1.eContents().get(0);
		private final Assignment cConstraintAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cConstraintEntityTextConstraintDefParserRuleCall_2_0 = (RuleCall)cConstraintAssignment_2.eContents().get(0);
		private final Assignment cDb_mapAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cDb_mapDBMapFieldParserRuleCall_3_0 = (RuleCall)cDb_mapAssignment_3.eContents().get(0);
		private final Assignment cData_domainAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cData_domainDataDomainParserRuleCall_4_0 = (RuleCall)cData_domainAssignment_4.eContents().get(0);
		private final Assignment cBusiness_ruleAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cBusiness_ruleBusinessRuleParserRuleCall_5_0 = (RuleCall)cBusiness_ruleAssignment_5.eContents().get(0);
		
		//EntityTextFieldAttr:
		//	glossary=Glossary | widget=WidgetText | constraint=EntityTextConstraintDef | db_map=DBMapField |
		//	data_domain=DataDomain | business_rule=BusinessRule;
		@Override public ParserRule getRule() { return rule; }
		
		////numberofvalues   = NumberOfValues         |
		//glossary=Glossary | widget=WidgetText | constraint=EntityTextConstraintDef | db_map=DBMapField | data_domain=DataDomain
		//| business_rule=BusinessRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////numberofvalues   = NumberOfValues         |
		//glossary=Glossary
		public Assignment getGlossaryAssignment_0() { return cGlossaryAssignment_0; }
		
		//Glossary
		public RuleCall getGlossaryGlossaryParserRuleCall_0_0() { return cGlossaryGlossaryParserRuleCall_0_0; }
		
		//widget=WidgetText
		public Assignment getWidgetAssignment_1() { return cWidgetAssignment_1; }
		
		//WidgetText
		public RuleCall getWidgetWidgetTextParserRuleCall_1_0() { return cWidgetWidgetTextParserRuleCall_1_0; }
		
		//constraint=EntityTextConstraintDef
		public Assignment getConstraintAssignment_2() { return cConstraintAssignment_2; }
		
		//EntityTextConstraintDef
		public RuleCall getConstraintEntityTextConstraintDefParserRuleCall_2_0() { return cConstraintEntityTextConstraintDefParserRuleCall_2_0; }
		
		//db_map=DBMapField
		public Assignment getDb_mapAssignment_3() { return cDb_mapAssignment_3; }
		
		//DBMapField
		public RuleCall getDb_mapDBMapFieldParserRuleCall_3_0() { return cDb_mapDBMapFieldParserRuleCall_3_0; }
		
		//data_domain=DataDomain
		public Assignment getData_domainAssignment_4() { return cData_domainAssignment_4; }
		
		//DataDomain
		public RuleCall getData_domainDataDomainParserRuleCall_4_0() { return cData_domainDataDomainParserRuleCall_4_0; }
		
		//business_rule=BusinessRule
		public Assignment getBusiness_ruleAssignment_5() { return cBusiness_ruleAssignment_5; }
		
		//BusinessRule
		public RuleCall getBusiness_ruleBusinessRuleParserRuleCall_5_0() { return cBusiness_ruleBusinessRuleParserRuleCall_5_0; }
	}
	public class EntityLongTextFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.EntityLongTextField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLongTextKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAttrsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttrsEntityLongTextFieldAttrParserRuleCall_4_1_0 = (RuleCall)cAttrsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//EntityLongTextField:
		//	'field' name=ID ':' 'LongText' ('{'
		//	attrs+=EntityLongTextFieldAttr+
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'field' name=ID ':' 'LongText' ('{' attrs+=EntityLongTextFieldAttr+ '}')?
		public Group getGroup() { return cGroup; }
		
		//'field'
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'LongText'
		public Keyword getLongTextKeyword_3() { return cLongTextKeyword_3; }
		
		//('{' attrs+=EntityLongTextFieldAttr+ '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//attrs+=EntityLongTextFieldAttr+
		public Assignment getAttrsAssignment_4_1() { return cAttrsAssignment_4_1; }
		
		//EntityLongTextFieldAttr
		public RuleCall getAttrsEntityLongTextFieldAttrParserRuleCall_4_1_0() { return cAttrsEntityLongTextFieldAttrParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class EntityLongTextFieldAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.EntityLongTextFieldAttr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGlossaryAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cGlossaryGlossaryParserRuleCall_0_0 = (RuleCall)cGlossaryAssignment_0.eContents().get(0);
		private final Assignment cWidgetAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cWidgetWidgetParserRuleCall_1_0 = (RuleCall)cWidgetAssignment_1.eContents().get(0);
		private final Assignment cConstraintAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cConstraintEntityTextConstraintDefParserRuleCall_2_0 = (RuleCall)cConstraintAssignment_2.eContents().get(0);
		private final Assignment cDb_mapAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cDb_mapDBMapFieldParserRuleCall_3_0 = (RuleCall)cDb_mapAssignment_3.eContents().get(0);
		private final Assignment cData_domainAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cData_domainDataDomainParserRuleCall_4_0 = (RuleCall)cData_domainAssignment_4.eContents().get(0);
		private final Assignment cBusiness_ruleAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cBusiness_ruleBusinessRuleParserRuleCall_5_0 = (RuleCall)cBusiness_ruleAssignment_5.eContents().get(0);
		
		//EntityLongTextFieldAttr:
		//	glossary=Glossary | widget=Widget | constraint=EntityTextConstraintDef | db_map=DBMapField | data_domain=DataDomain |
		//	business_rule=BusinessRule;
		@Override public ParserRule getRule() { return rule; }
		
		//glossary=Glossary | widget=Widget | constraint=EntityTextConstraintDef | db_map=DBMapField | data_domain=DataDomain |
		//business_rule=BusinessRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//glossary=Glossary
		public Assignment getGlossaryAssignment_0() { return cGlossaryAssignment_0; }
		
		//Glossary
		public RuleCall getGlossaryGlossaryParserRuleCall_0_0() { return cGlossaryGlossaryParserRuleCall_0_0; }
		
		//widget=Widget
		public Assignment getWidgetAssignment_1() { return cWidgetAssignment_1; }
		
		//Widget
		public RuleCall getWidgetWidgetParserRuleCall_1_0() { return cWidgetWidgetParserRuleCall_1_0; }
		
		//constraint=EntityTextConstraintDef
		public Assignment getConstraintAssignment_2() { return cConstraintAssignment_2; }
		
		//EntityTextConstraintDef
		public RuleCall getConstraintEntityTextConstraintDefParserRuleCall_2_0() { return cConstraintEntityTextConstraintDefParserRuleCall_2_0; }
		
		//db_map=DBMapField
		public Assignment getDb_mapAssignment_3() { return cDb_mapAssignment_3; }
		
		//DBMapField
		public RuleCall getDb_mapDBMapFieldParserRuleCall_3_0() { return cDb_mapDBMapFieldParserRuleCall_3_0; }
		
		//data_domain=DataDomain
		public Assignment getData_domainAssignment_4() { return cData_domainAssignment_4; }
		
		//DataDomain
		public RuleCall getData_domainDataDomainParserRuleCall_4_0() { return cData_domainDataDomainParserRuleCall_4_0; }
		
		//business_rule=BusinessRule
		public Assignment getBusiness_ruleAssignment_5() { return cBusiness_ruleAssignment_5; }
		
		//BusinessRule
		public RuleCall getBusiness_ruleBusinessRuleParserRuleCall_5_0() { return cBusiness_ruleBusinessRuleParserRuleCall_5_0; }
	}
	public class EntityDateFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.EntityDateField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDateKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAttrsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttrsEntityDateFieldAttrParserRuleCall_4_1_0 = (RuleCall)cAttrsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//EntityDateField:
		//	'field' name=ID ':' 'Date' ('{'
		//	attrs+=EntityDateFieldAttr+
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'field' name=ID ':' 'Date' ('{' attrs+=EntityDateFieldAttr+ '}')?
		public Group getGroup() { return cGroup; }
		
		//'field'
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'Date'
		public Keyword getDateKeyword_3() { return cDateKeyword_3; }
		
		//('{' attrs+=EntityDateFieldAttr+ '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//attrs+=EntityDateFieldAttr+
		public Assignment getAttrsAssignment_4_1() { return cAttrsAssignment_4_1; }
		
		//EntityDateFieldAttr
		public RuleCall getAttrsEntityDateFieldAttrParserRuleCall_4_1_0() { return cAttrsEntityDateFieldAttrParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class EntityDateFieldAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.EntityDateFieldAttr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDefaultKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cDefaultAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDefaultDATEParserRuleCall_0_2_0 = (RuleCall)cDefaultAssignment_0_2.eContents().get(0);
		private final Assignment cGlossaryAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cGlossaryGlossaryParserRuleCall_1_0 = (RuleCall)cGlossaryAssignment_1.eContents().get(0);
		private final Assignment cWidgetAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cWidgetWidgetDateParserRuleCall_2_0 = (RuleCall)cWidgetAssignment_2.eContents().get(0);
		private final Assignment cConstraintAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cConstraintEntityTextConstraintDefParserRuleCall_3_0 = (RuleCall)cConstraintAssignment_3.eContents().get(0);
		private final Assignment cDb_mapAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cDb_mapDBMapFieldParserRuleCall_4_0 = (RuleCall)cDb_mapAssignment_4.eContents().get(0);
		private final Assignment cData_domainAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cData_domainDataDomainParserRuleCall_5_0 = (RuleCall)cData_domainAssignment_5.eContents().get(0);
		private final Assignment cBusiness_ruleAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cBusiness_ruleBusinessRuleParserRuleCall_6_0 = (RuleCall)cBusiness_ruleAssignment_6.eContents().get(0);
		
		//EntityDateFieldAttr:
		//	'default' ':' default=DATE | glossary=Glossary | widget=WidgetDate | constraint=EntityTextConstraintDef |
		//	db_map=DBMapField | data_domain=DataDomain | business_rule=BusinessRule;
		@Override public ParserRule getRule() { return rule; }
		
		//'default' ':' default=DATE | glossary=Glossary | widget=WidgetDate | constraint=EntityTextConstraintDef |
		//db_map=DBMapField | data_domain=DataDomain | business_rule=BusinessRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'default' ':' default=DATE
		public Group getGroup_0() { return cGroup_0; }
		
		//'default'
		public Keyword getDefaultKeyword_0_0() { return cDefaultKeyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//default=DATE
		public Assignment getDefaultAssignment_0_2() { return cDefaultAssignment_0_2; }
		
		//DATE
		public RuleCall getDefaultDATEParserRuleCall_0_2_0() { return cDefaultDATEParserRuleCall_0_2_0; }
		
		//glossary=Glossary
		public Assignment getGlossaryAssignment_1() { return cGlossaryAssignment_1; }
		
		//Glossary
		public RuleCall getGlossaryGlossaryParserRuleCall_1_0() { return cGlossaryGlossaryParserRuleCall_1_0; }
		
		//widget=WidgetDate
		public Assignment getWidgetAssignment_2() { return cWidgetAssignment_2; }
		
		//WidgetDate
		public RuleCall getWidgetWidgetDateParserRuleCall_2_0() { return cWidgetWidgetDateParserRuleCall_2_0; }
		
		//constraint=EntityTextConstraintDef
		public Assignment getConstraintAssignment_3() { return cConstraintAssignment_3; }
		
		//EntityTextConstraintDef
		public RuleCall getConstraintEntityTextConstraintDefParserRuleCall_3_0() { return cConstraintEntityTextConstraintDefParserRuleCall_3_0; }
		
		//db_map=DBMapField
		public Assignment getDb_mapAssignment_4() { return cDb_mapAssignment_4; }
		
		//DBMapField
		public RuleCall getDb_mapDBMapFieldParserRuleCall_4_0() { return cDb_mapDBMapFieldParserRuleCall_4_0; }
		
		//data_domain=DataDomain
		public Assignment getData_domainAssignment_5() { return cData_domainAssignment_5; }
		
		//DataDomain
		public RuleCall getData_domainDataDomainParserRuleCall_5_0() { return cData_domainDataDomainParserRuleCall_5_0; }
		
		//business_rule=BusinessRule
		public Assignment getBusiness_ruleAssignment_6() { return cBusiness_ruleAssignment_6; }
		
		//BusinessRule
		public RuleCall getBusiness_ruleBusinessRuleParserRuleCall_6_0() { return cBusiness_ruleBusinessRuleParserRuleCall_6_0; }
	}
	public class EntityReferenceFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.EntityReferenceField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReferenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSuperTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSuperTypeEnumEntityCrossReference_3_0 = (CrossReference)cSuperTypeAssignment_3.eContents().get(0);
		private final RuleCall cSuperTypeEnumEntityQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cSuperTypeEnumEntityCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLowerBoundAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLowerBoundINTTerminalRuleCall_5_0 = (RuleCall)cLowerBoundAssignment_5.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cUpperBoundAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cUpperBoundCardinalityUpperBoundParserRuleCall_7_0 = (RuleCall)cUpperBoundAssignment_7.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cOppositeOfKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cOppositeAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final CrossReference cOppositeEntityReferenceFieldCrossReference_9_1_0 = (CrossReference)cOppositeAssignment_9_1.eContents().get(0);
		private final RuleCall cOppositeEntityReferenceFieldQualifiedNameParserRuleCall_9_1_0_1 = (RuleCall)cOppositeEntityReferenceFieldCrossReference_9_1_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cAttrsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cAttrsEntityReferenceFieldAttrParserRuleCall_10_1_0 = (RuleCall)cAttrsAssignment_10_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		
		//EntityReferenceField:
		//	'reference' name=ID ':' superType=[EnumEntity|QualifiedName] '[' lowerBound=INT '..' upperBound=CardinalityUpperBound
		//	']' ('opposite-of' opposite=[EntityReferenceField|QualifiedName])? ('{'
		//	attrs+=EntityReferenceFieldAttr+
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'reference' name=ID ':' superType=[EnumEntity|QualifiedName] '[' lowerBound=INT '..' upperBound=CardinalityUpperBound
		//']' ('opposite-of' opposite=[EntityReferenceField|QualifiedName])? ('{' attrs+=EntityReferenceFieldAttr+ '}')?
		public Group getGroup() { return cGroup; }
		
		//'reference'
		public Keyword getReferenceKeyword_0() { return cReferenceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//superType=[EnumEntity|QualifiedName]
		public Assignment getSuperTypeAssignment_3() { return cSuperTypeAssignment_3; }
		
		//[EnumEntity|QualifiedName]
		public CrossReference getSuperTypeEnumEntityCrossReference_3_0() { return cSuperTypeEnumEntityCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getSuperTypeEnumEntityQualifiedNameParserRuleCall_3_0_1() { return cSuperTypeEnumEntityQualifiedNameParserRuleCall_3_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//lowerBound=INT
		public Assignment getLowerBoundAssignment_5() { return cLowerBoundAssignment_5; }
		
		//INT
		public RuleCall getLowerBoundINTTerminalRuleCall_5_0() { return cLowerBoundINTTerminalRuleCall_5_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_6() { return cFullStopFullStopKeyword_6; }
		
		//upperBound=CardinalityUpperBound
		public Assignment getUpperBoundAssignment_7() { return cUpperBoundAssignment_7; }
		
		//CardinalityUpperBound
		public RuleCall getUpperBoundCardinalityUpperBoundParserRuleCall_7_0() { return cUpperBoundCardinalityUpperBoundParserRuleCall_7_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
		
		//('opposite-of' opposite=[EntityReferenceField|QualifiedName])?
		public Group getGroup_9() { return cGroup_9; }
		
		//'opposite-of'
		public Keyword getOppositeOfKeyword_9_0() { return cOppositeOfKeyword_9_0; }
		
		//opposite=[EntityReferenceField|QualifiedName]
		public Assignment getOppositeAssignment_9_1() { return cOppositeAssignment_9_1; }
		
		//[EntityReferenceField|QualifiedName]
		public CrossReference getOppositeEntityReferenceFieldCrossReference_9_1_0() { return cOppositeEntityReferenceFieldCrossReference_9_1_0; }
		
		//QualifiedName
		public RuleCall getOppositeEntityReferenceFieldQualifiedNameParserRuleCall_9_1_0_1() { return cOppositeEntityReferenceFieldQualifiedNameParserRuleCall_9_1_0_1; }
		
		//('{' attrs+=EntityReferenceFieldAttr+ '}')?
		public Group getGroup_10() { return cGroup_10; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10_0() { return cLeftCurlyBracketKeyword_10_0; }
		
		//attrs+=EntityReferenceFieldAttr+
		public Assignment getAttrsAssignment_10_1() { return cAttrsAssignment_10_1; }
		
		//EntityReferenceFieldAttr
		public RuleCall getAttrsEntityReferenceFieldAttrParserRuleCall_10_1_0() { return cAttrsEntityReferenceFieldAttrParserRuleCall_10_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10_2() { return cRightCurlyBracketKeyword_10_2; }
	}
	public class CardinalityUpperBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.CardinalityUpperBound");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//CardinalityUpperBound:
		//	INT | '*';
		@Override public ParserRule getRule() { return rule; }
		
		//INT | '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class EntityReferenceFieldAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.EntityReferenceFieldAttr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGlossaryAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cGlossaryGlossaryParserRuleCall_0_0 = (RuleCall)cGlossaryAssignment_0.eContents().get(0);
		private final Assignment cWidgetAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cWidgetWidgetEnumParserRuleCall_1_0 = (RuleCall)cWidgetAssignment_1.eContents().get(0);
		private final Assignment cConstraintAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cConstraintEntityTextConstraintDefParserRuleCall_2_0 = (RuleCall)cConstraintAssignment_2.eContents().get(0);
		private final Assignment cDb_mapAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cDb_mapDBMapFieldParserRuleCall_3_0 = (RuleCall)cDb_mapAssignment_3.eContents().get(0);
		private final Assignment cData_domainAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cData_domainDataDomainParserRuleCall_4_0 = (RuleCall)cData_domainAssignment_4.eContents().get(0);
		private final Assignment cBusiness_ruleAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cBusiness_ruleBusinessRuleParserRuleCall_5_0 = (RuleCall)cBusiness_ruleAssignment_5.eContents().get(0);
		
		//EntityReferenceFieldAttr:
		//	glossary=Glossary | widget=WidgetEnum | constraint=EntityTextConstraintDef | db_map=DBMapField |
		//	data_domain=DataDomain | business_rule=BusinessRule;
		@Override public ParserRule getRule() { return rule; }
		
		//glossary=Glossary | widget=WidgetEnum | constraint=EntityTextConstraintDef | db_map=DBMapField | data_domain=DataDomain
		//| business_rule=BusinessRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//glossary=Glossary
		public Assignment getGlossaryAssignment_0() { return cGlossaryAssignment_0; }
		
		//Glossary
		public RuleCall getGlossaryGlossaryParserRuleCall_0_0() { return cGlossaryGlossaryParserRuleCall_0_0; }
		
		//widget=WidgetEnum
		public Assignment getWidgetAssignment_1() { return cWidgetAssignment_1; }
		
		//WidgetEnum
		public RuleCall getWidgetWidgetEnumParserRuleCall_1_0() { return cWidgetWidgetEnumParserRuleCall_1_0; }
		
		//constraint=EntityTextConstraintDef
		public Assignment getConstraintAssignment_2() { return cConstraintAssignment_2; }
		
		//EntityTextConstraintDef
		public RuleCall getConstraintEntityTextConstraintDefParserRuleCall_2_0() { return cConstraintEntityTextConstraintDefParserRuleCall_2_0; }
		
		//db_map=DBMapField
		public Assignment getDb_mapAssignment_3() { return cDb_mapAssignment_3; }
		
		//DBMapField
		public RuleCall getDb_mapDBMapFieldParserRuleCall_3_0() { return cDb_mapDBMapFieldParserRuleCall_3_0; }
		
		//data_domain=DataDomain
		public Assignment getData_domainAssignment_4() { return cData_domainAssignment_4; }
		
		//DataDomain
		public RuleCall getData_domainDataDomainParserRuleCall_4_0() { return cData_domainDataDomainParserRuleCall_4_0; }
		
		//business_rule=BusinessRule
		public Assignment getBusiness_ruleAssignment_5() { return cBusiness_ruleAssignment_5; }
		
		//BusinessRule
		public RuleCall getBusiness_ruleBusinessRuleParserRuleCall_5_0() { return cBusiness_ruleBusinessRuleParserRuleCall_5_0; }
	}
	public class EnumEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.EnumEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EnumEntity:
		//	Enum | Entity;
		@Override public ParserRule getRule() { return rule; }
		
		//Enum | Entity
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Enum
		public RuleCall getEnumParserRuleCall_0() { return cEnumParserRuleCall_0; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_1() { return cEntityParserRuleCall_1; }
	}
	public class EntityImageFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.EntityImageField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cImageKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAttrsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttrsEntityAttrParserRuleCall_4_1_0 = (RuleCall)cAttrsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//EntityImageField:
		//	'field' name=ID ':' 'Image' ('{'
		//	attrs+=EntityAttr+
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'field' name=ID ':' 'Image' ('{' attrs+=EntityAttr+ '}')?
		public Group getGroup() { return cGroup; }
		
		//'field'
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'Image'
		public Keyword getImageKeyword_3() { return cImageKeyword_3; }
		
		//('{' attrs+=EntityAttr+ '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//attrs+=EntityAttr+
		public Assignment getAttrsAssignment_4_1() { return cAttrsAssignment_4_1; }
		
		//EntityAttr
		public RuleCall getAttrsEntityAttrParserRuleCall_4_1_0() { return cAttrsEntityAttrParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class EntityFileFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.EntityFileField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFileKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAttrsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttrsEntityAttrParserRuleCall_4_1_0 = (RuleCall)cAttrsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//EntityFileField:
		//	'field' name=ID ':' 'File' ('{'
		//	attrs+=EntityAttr+
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'field' name=ID ':' 'File' ('{' attrs+=EntityAttr+ '}')?
		public Group getGroup() { return cGroup; }
		
		//'field'
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'File'
		public Keyword getFileKeyword_3() { return cFileKeyword_3; }
		
		//('{' attrs+=EntityAttr+ '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//attrs+=EntityAttr+
		public Assignment getAttrsAssignment_4_1() { return cAttrsAssignment_4_1; }
		
		//EntityAttr
		public RuleCall getAttrsEntityAttrParserRuleCall_4_1_0() { return cAttrsEntityAttrParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class EntityEmailFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.EntityEmailField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEmailKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAttrsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttrsEntityAttrParserRuleCall_4_1_0 = (RuleCall)cAttrsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//EntityEmailField:
		//	'field' name=ID ':' 'Email' ('{'
		//	attrs+=EntityAttr+
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'field' name=ID ':' 'Email' ('{' attrs+=EntityAttr+ '}')?
		public Group getGroup() { return cGroup; }
		
		//'field'
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'Email'
		public Keyword getEmailKeyword_3() { return cEmailKeyword_3; }
		
		//('{' attrs+=EntityAttr+ '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//attrs+=EntityAttr+
		public Assignment getAttrsAssignment_4_1() { return cAttrsAssignment_4_1; }
		
		//EntityAttr
		public RuleCall getAttrsEntityAttrParserRuleCall_4_1_0() { return cAttrsEntityAttrParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class EntityDecimalFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.EntityDecimalField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDecimalKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAttrsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttrsEntityAttrParserRuleCall_4_1_0 = (RuleCall)cAttrsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//EntityDecimalField:
		//	'field' name=ID ':' 'Decimal' ('{'
		//	attrs+=EntityAttr+
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'field' name=ID ':' 'Decimal' ('{' attrs+=EntityAttr+ '}')?
		public Group getGroup() { return cGroup; }
		
		//'field'
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'Decimal'
		public Keyword getDecimalKeyword_3() { return cDecimalKeyword_3; }
		
		//('{' attrs+=EntityAttr+ '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//attrs+=EntityAttr+
		public Assignment getAttrsAssignment_4_1() { return cAttrsAssignment_4_1; }
		
		//EntityAttr
		public RuleCall getAttrsEntityAttrParserRuleCall_4_1_0() { return cAttrsEntityAttrParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class EntityIntegerFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.EntityIntegerField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIntegerKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAttrsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttrsEntityAttrParserRuleCall_4_1_0 = (RuleCall)cAttrsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//EntityIntegerField:
		//	'field' name=ID ':' 'Integer' ('{'
		//	attrs+=EntityAttr+
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'field' name=ID ':' 'Integer' ('{' attrs+=EntityAttr+ '}')?
		public Group getGroup() { return cGroup; }
		
		//'field'
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'Integer'
		public Keyword getIntegerKeyword_3() { return cIntegerKeyword_3; }
		
		//('{' attrs+=EntityAttr+ '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//attrs+=EntityAttr+
		public Assignment getAttrsAssignment_4_1() { return cAttrsAssignment_4_1; }
		
		//EntityAttr
		public RuleCall getAttrsEntityAttrParserRuleCall_4_1_0() { return cAttrsEntityAttrParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class EntityCurrencyFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.EntityCurrencyField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCurrencyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAttrsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttrsEntityAttrParserRuleCall_4_1_0 = (RuleCall)cAttrsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//EntityCurrencyField:
		//	'field' name=ID ':' 'Currency' ('{'
		//	attrs+=EntityAttr+
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'field' name=ID ':' 'Currency' ('{' attrs+=EntityAttr+ '}')?
		public Group getGroup() { return cGroup; }
		
		//'field'
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'Currency'
		public Keyword getCurrencyKeyword_3() { return cCurrencyKeyword_3; }
		
		//('{' attrs+=EntityAttr+ '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//attrs+=EntityAttr+
		public Assignment getAttrsAssignment_4_1() { return cAttrsAssignment_4_1; }
		
		//EntityAttr
		public RuleCall getAttrsEntityAttrParserRuleCall_4_1_0() { return cAttrsEntityAttrParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class EntityAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.EntityAttr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGlossaryAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cGlossaryGlossaryParserRuleCall_0_0 = (RuleCall)cGlossaryAssignment_0.eContents().get(0);
		private final Assignment cWidgetAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cWidgetWidgetParserRuleCall_1_0 = (RuleCall)cWidgetAssignment_1.eContents().get(0);
		private final Assignment cConstraintAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cConstraintEntityTextConstraintDefParserRuleCall_2_0 = (RuleCall)cConstraintAssignment_2.eContents().get(0);
		private final Assignment cDb_mapAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cDb_mapDBMapFieldParserRuleCall_3_0 = (RuleCall)cDb_mapAssignment_3.eContents().get(0);
		private final Assignment cData_domainAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cData_domainDataDomainParserRuleCall_4_0 = (RuleCall)cData_domainAssignment_4.eContents().get(0);
		private final Assignment cBusiness_ruleAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cBusiness_ruleBusinessRuleParserRuleCall_5_0 = (RuleCall)cBusiness_ruleAssignment_5.eContents().get(0);
		
		//EntityAttr:
		//	glossary=Glossary | widget=Widget | constraint=EntityTextConstraintDef | db_map=DBMapField | data_domain=DataDomain |
		//	business_rule=BusinessRule;
		@Override public ParserRule getRule() { return rule; }
		
		//glossary=Glossary | widget=Widget | constraint=EntityTextConstraintDef | db_map=DBMapField | data_domain=DataDomain |
		//business_rule=BusinessRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//glossary=Glossary
		public Assignment getGlossaryAssignment_0() { return cGlossaryAssignment_0; }
		
		//Glossary
		public RuleCall getGlossaryGlossaryParserRuleCall_0_0() { return cGlossaryGlossaryParserRuleCall_0_0; }
		
		//widget=Widget
		public Assignment getWidgetAssignment_1() { return cWidgetAssignment_1; }
		
		//Widget
		public RuleCall getWidgetWidgetParserRuleCall_1_0() { return cWidgetWidgetParserRuleCall_1_0; }
		
		//constraint=EntityTextConstraintDef
		public Assignment getConstraintAssignment_2() { return cConstraintAssignment_2; }
		
		//EntityTextConstraintDef
		public RuleCall getConstraintEntityTextConstraintDefParserRuleCall_2_0() { return cConstraintEntityTextConstraintDefParserRuleCall_2_0; }
		
		//db_map=DBMapField
		public Assignment getDb_mapAssignment_3() { return cDb_mapAssignment_3; }
		
		//DBMapField
		public RuleCall getDb_mapDBMapFieldParserRuleCall_3_0() { return cDb_mapDBMapFieldParserRuleCall_3_0; }
		
		//data_domain=DataDomain
		public Assignment getData_domainAssignment_4() { return cData_domainAssignment_4; }
		
		//DataDomain
		public RuleCall getData_domainDataDomainParserRuleCall_4_0() { return cData_domainDataDomainParserRuleCall_4_0; }
		
		//business_rule=BusinessRule
		public Assignment getBusiness_ruleAssignment_5() { return cBusiness_ruleAssignment_5; }
		
		//BusinessRule
		public RuleCall getBusiness_ruleBusinessRuleParserRuleCall_5_0() { return cBusiness_ruleBusinessRuleParserRuleCall_5_0; }
	}
	public class ConstraintRequiredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.ConstraintRequired");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiredKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		
		//ConstraintRequired:
		//	'required' ':' value=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//'required' ':' value=('true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//'required'
		public Keyword getRequiredKeyword_0() { return cRequiredKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_0_0() { return cValueTrueKeyword_2_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_0_1() { return cValueFalseKeyword_2_0_1; }
	}
	public class ConstraintUniqueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.ConstraintUnique");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUniqueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		
		//ConstraintUnique:
		//	'unique' ':' value=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//'unique' ':' value=('true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//'unique'
		public Keyword getUniqueKeyword_0() { return cUniqueKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_0_0() { return cValueTrueKeyword_2_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_0_1() { return cValueFalseKeyword_2_0_1; }
	}
	public class ConstraintMaxLengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.ConstraintMaxLength");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMax_lengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ConstraintMaxLength:
		//	'max_length' ':' value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'max_length' ':' value=INT
		public Group getGroup() { return cGroup; }
		
		//'max_length'
		public Keyword getMax_lengthKeyword_0() { return cMax_lengthKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class ConstraintMinLengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.ConstraintMinLength");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMin_lengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ConstraintMinLength:
		//	'min_length' ':' value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'min_length' ':' value=INT
		public Group getGroup() { return cGroup; }
		
		//'min_length'
		public Keyword getMin_lengthKeyword_0() { return cMin_lengthKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class GlossaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.Glossary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlossaryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGlossary_nameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGlossary_nameGlossaryNameParserRuleCall_2_0 = (RuleCall)cGlossary_nameAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGlossary_descriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGlossary_descriptionGlossaryDescriptionParserRuleCall_4_0 = (RuleCall)cGlossary_descriptionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////Glossary
		//Glossary:
		//	'glossary' '('
		//	glossary_name=GlossaryName
		//	','
		//	glossary_description=GlossaryDescription
		//	//attrs += GlosaryAttr (',' attrs += GlosaryAttr)* 
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'glossary' '(' glossary_name=GlossaryName ',' glossary_description=GlossaryDescription //attrs += GlosaryAttr (',' attrs += GlosaryAttr)* 
		//')'
		public Group getGroup() { return cGroup; }
		
		//'glossary'
		public Keyword getGlossaryKeyword_0() { return cGlossaryKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//glossary_name=GlossaryName
		public Assignment getGlossary_nameAssignment_2() { return cGlossary_nameAssignment_2; }
		
		//GlossaryName
		public RuleCall getGlossary_nameGlossaryNameParserRuleCall_2_0() { return cGlossary_nameGlossaryNameParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//glossary_description=GlossaryDescription
		public Assignment getGlossary_descriptionAssignment_4() { return cGlossary_descriptionAssignment_4; }
		
		//GlossaryDescription
		public RuleCall getGlossary_descriptionGlossaryDescriptionParserRuleCall_4_0() { return cGlossary_descriptionGlossaryDescriptionParserRuleCall_4_0; }
		
		////attrs += GlosaryAttr (',' attrs += GlosaryAttr)* 
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class GlossaryNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.GlossaryName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		
		//GlossaryName:
		//	'name' ':' label=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'name' ':' label=STRING
		public Group getGroup() { return cGroup; }
		
		//'name'
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//label=STRING
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0() { return cLabelSTRINGTerminalRuleCall_2_0; }
	}
	public class GlossaryDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.GlossaryDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		
		//GlossaryDescription:
		//	'description' ':' label=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'description' ':' label=STRING
		public Group getGroup() { return cGroup; }
		
		//'description'
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//label=STRING
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0() { return cLabelSTRINGTerminalRuleCall_2_0; }
	}
	public class WidgetLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.WidgetLabel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		
		//WidgetLabel:
		//	'label' ':' label=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'label' ':' label=STRING
		public Group getGroup() { return cGroup; }
		
		//'label'
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//label=STRING
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0() { return cLabelSTRINGTerminalRuleCall_2_0; }
	}
	public class WidgetHelpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.WidgetHelp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHelpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHelpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHelpSTRINGTerminalRuleCall_2_0 = (RuleCall)cHelpAssignment_2.eContents().get(0);
		
		//WidgetHelp:
		//	'help' ':' help=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'help' ':' help=STRING
		public Group getGroup() { return cGroup; }
		
		//'help'
		public Keyword getHelpKeyword_0() { return cHelpKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//help=STRING
		public Assignment getHelpAssignment_2() { return cHelpAssignment_2; }
		
		//STRING
		public RuleCall getHelpSTRINGTerminalRuleCall_2_0() { return cHelpSTRINGTerminalRuleCall_2_0; }
	}
	public class WidgetExposedFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.WidgetExposedFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExposed_filterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExposed_filterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cExposed_filterAlternatives_2_0 = (Alternatives)cExposed_filterAssignment_2.eContents().get(0);
		private final Keyword cExposed_filterTrueKeyword_2_0_0 = (Keyword)cExposed_filterAlternatives_2_0.eContents().get(0);
		private final Keyword cExposed_filterFalseKeyword_2_0_1 = (Keyword)cExposed_filterAlternatives_2_0.eContents().get(1);
		
		//WidgetExposedFilter:
		//	'exposed_filter' ':' exposed_filter=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//'exposed_filter' ':' exposed_filter=('true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//'exposed_filter'
		public Keyword getExposed_filterKeyword_0() { return cExposed_filterKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//exposed_filter=('true' | 'false')
		public Assignment getExposed_filterAssignment_2() { return cExposed_filterAssignment_2; }
		
		//('true' | 'false')
		public Alternatives getExposed_filterAlternatives_2_0() { return cExposed_filterAlternatives_2_0; }
		
		//'true'
		public Keyword getExposed_filterTrueKeyword_2_0_0() { return cExposed_filterTrueKeyword_2_0_0; }
		
		//'false'
		public Keyword getExposed_filterFalseKeyword_2_0_1() { return cExposed_filterFalseKeyword_2_0_1; }
	}
	public class WidgetTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.WidgetType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTypeAlternatives_2_0 = (Alternatives)cTypeAssignment_2.eContents().get(0);
		private final Keyword cTypeOptionKeyword_2_0_0 = (Keyword)cTypeAlternatives_2_0.eContents().get(0);
		private final Keyword cTypeCheckKeyword_2_0_1 = (Keyword)cTypeAlternatives_2_0.eContents().get(1);
		private final Keyword cTypeAutocompleteKeyword_2_0_2 = (Keyword)cTypeAlternatives_2_0.eContents().get(2);
		
		//WidgetType:
		//	'type' ':' type=('Option' | 'Check' | 'Autocomplete');
		@Override public ParserRule getRule() { return rule; }
		
		//'type' ':' type=('Option' | 'Check' | 'Autocomplete')
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=('Option' | 'Check' | 'Autocomplete')
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//('Option' | 'Check' | 'Autocomplete')
		public Alternatives getTypeAlternatives_2_0() { return cTypeAlternatives_2_0; }
		
		//'Option'
		public Keyword getTypeOptionKeyword_2_0_0() { return cTypeOptionKeyword_2_0_0; }
		
		//'Check'
		public Keyword getTypeCheckKeyword_2_0_1() { return cTypeCheckKeyword_2_0_1; }
		
		//'Autocomplete'
		public Keyword getTypeAutocompleteKeyword_2_0_2() { return cTypeAutocompleteKeyword_2_0_2; }
	}
	public class WidgetTypeSelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.WidgetTypeSelect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cTypeSelectListKeyword_2_0 = (Keyword)cTypeAssignment_2.eContents().get(0);
		
		//WidgetTypeSelect:
		//	'type' ':' type='SelectList';
		@Override public ParserRule getRule() { return rule; }
		
		//'type' ':' type='SelectList'
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type='SelectList'
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//'SelectList'
		public Keyword getTypeSelectListKeyword_2_0() { return cTypeSelectListKeyword_2_0; }
	}
	public class WidgetSortByElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.WidgetSortBy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSort_byKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSortbyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSortbyIDTerminalRuleCall_2_0 = (RuleCall)cSortbyAssignment_2.eContents().get(0);
		
		//WidgetSortBy:
		//	'sort_by' ':' sortby=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'sort_by' ':' sortby=ID
		public Group getGroup() { return cGroup; }
		
		//'sort_by'
		public Keyword getSort_byKeyword_0() { return cSort_byKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//sortby=ID
		public Assignment getSortbyAssignment_2() { return cSortbyAssignment_2; }
		
		//ID
		public RuleCall getSortbyIDTerminalRuleCall_2_0() { return cSortbyIDTerminalRuleCall_2_0; }
	}
	public class WidgetStartYearElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.WidgetStartYear");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWidgetStartYearAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStart_year_from_nowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cStartHyphenMinusKeyword_3_0 = (Keyword)cStartAssignment_3.eContents().get(0);
		private final Keyword cPlusSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cINTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//WidgetStartYear:
		//	{WidgetStartYear} 'start_year_from_now' ':' start='-'? '+'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{WidgetStartYear} 'start_year_from_now' ':' start='-'? '+'? INT
		public Group getGroup() { return cGroup; }
		
		//{WidgetStartYear}
		public Action getWidgetStartYearAction_0() { return cWidgetStartYearAction_0; }
		
		//'start_year_from_now'
		public Keyword getStart_year_from_nowKeyword_1() { return cStart_year_from_nowKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//start='-'?
		public Assignment getStartAssignment_3() { return cStartAssignment_3; }
		
		//'-'
		public Keyword getStartHyphenMinusKeyword_3_0() { return cStartHyphenMinusKeyword_3_0; }
		
		//'+'?
		public Keyword getPlusSignKeyword_4() { return cPlusSignKeyword_4; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_5() { return cINTTerminalRuleCall_5; }
	}
	public class WidgetEndYearElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.WidgetEndYear");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWidgetEndYearAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnd_year_from_nowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEndAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cEndHyphenMinusKeyword_3_0 = (Keyword)cEndAssignment_3.eContents().get(0);
		private final Keyword cPlusSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cINTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//WidgetEndYear:
		//	{WidgetEndYear} 'end_year_from_now' ':' end='-'? '+'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{WidgetEndYear} 'end_year_from_now' ':' end='-'? '+'? INT
		public Group getGroup() { return cGroup; }
		
		//{WidgetEndYear}
		public Action getWidgetEndYearAction_0() { return cWidgetEndYearAction_0; }
		
		//'end_year_from_now'
		public Keyword getEnd_year_from_nowKeyword_1() { return cEnd_year_from_nowKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//end='-'?
		public Assignment getEndAssignment_3() { return cEndAssignment_3; }
		
		//'-'
		public Keyword getEndHyphenMinusKeyword_3_0() { return cEndHyphenMinusKeyword_3_0; }
		
		//'+'?
		public Keyword getPlusSignKeyword_4() { return cPlusSignKeyword_4; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_5() { return cINTTerminalRuleCall_5; }
	}
	public class WidgetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.Widget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWidgetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cWidgetWidgetKeyword_0_0 = (Keyword)cWidgetAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttrsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttrsWidgetAttrParserRuleCall_2_0 = (RuleCall)cAttrsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttrsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttrsWidgetAttrParserRuleCall_3_1_0 = (RuleCall)cAttrsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Widget:
		//	widget='widget' '(' attrs+=WidgetAttr (',' attrs+=WidgetAttr)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//widget='widget' '(' attrs+=WidgetAttr (',' attrs+=WidgetAttr)* ')'
		public Group getGroup() { return cGroup; }
		
		//widget='widget'
		public Assignment getWidgetAssignment_0() { return cWidgetAssignment_0; }
		
		//'widget'
		public Keyword getWidgetWidgetKeyword_0_0() { return cWidgetWidgetKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//attrs+=WidgetAttr
		public Assignment getAttrsAssignment_2() { return cAttrsAssignment_2; }
		
		//WidgetAttr
		public RuleCall getAttrsWidgetAttrParserRuleCall_2_0() { return cAttrsWidgetAttrParserRuleCall_2_0; }
		
		//(',' attrs+=WidgetAttr)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//attrs+=WidgetAttr
		public Assignment getAttrsAssignment_3_1() { return cAttrsAssignment_3_1; }
		
		//WidgetAttr
		public RuleCall getAttrsWidgetAttrParserRuleCall_3_1_0() { return cAttrsWidgetAttrParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class WidgetEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.WidgetEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWidgetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cWidgetWidgetKeyword_0_0 = (Keyword)cWidgetAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttrsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttrsWidgetAttrEnumParserRuleCall_2_0 = (RuleCall)cAttrsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttrsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttrsWidgetAttrEnumParserRuleCall_3_1_0 = (RuleCall)cAttrsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WidgetEnum:
		//	widget='widget' '(' attrs+=WidgetAttrEnum (',' attrs+=WidgetAttrEnum)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//widget='widget' '(' attrs+=WidgetAttrEnum (',' attrs+=WidgetAttrEnum)* ')'
		public Group getGroup() { return cGroup; }
		
		//widget='widget'
		public Assignment getWidgetAssignment_0() { return cWidgetAssignment_0; }
		
		//'widget'
		public Keyword getWidgetWidgetKeyword_0_0() { return cWidgetWidgetKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//attrs+=WidgetAttrEnum
		public Assignment getAttrsAssignment_2() { return cAttrsAssignment_2; }
		
		//WidgetAttrEnum
		public RuleCall getAttrsWidgetAttrEnumParserRuleCall_2_0() { return cAttrsWidgetAttrEnumParserRuleCall_2_0; }
		
		//(',' attrs+=WidgetAttrEnum)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//attrs+=WidgetAttrEnum
		public Assignment getAttrsAssignment_3_1() { return cAttrsAssignment_3_1; }
		
		//WidgetAttrEnum
		public RuleCall getAttrsWidgetAttrEnumParserRuleCall_3_1_0() { return cAttrsWidgetAttrEnumParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class WidgetDateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.WidgetDate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWidgetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cWidgetWidgetKeyword_0_0 = (Keyword)cWidgetAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttrsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttrsWidgetAttrDateParserRuleCall_2_0 = (RuleCall)cAttrsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttrsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttrsWidgetAttrDateParserRuleCall_3_1_0 = (RuleCall)cAttrsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WidgetDate:
		//	widget='widget' '(' attrs+=WidgetAttrDate (',' attrs+=WidgetAttrDate)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//widget='widget' '(' attrs+=WidgetAttrDate (',' attrs+=WidgetAttrDate)* ')'
		public Group getGroup() { return cGroup; }
		
		//widget='widget'
		public Assignment getWidgetAssignment_0() { return cWidgetAssignment_0; }
		
		//'widget'
		public Keyword getWidgetWidgetKeyword_0_0() { return cWidgetWidgetKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//attrs+=WidgetAttrDate
		public Assignment getAttrsAssignment_2() { return cAttrsAssignment_2; }
		
		//WidgetAttrDate
		public RuleCall getAttrsWidgetAttrDateParserRuleCall_2_0() { return cAttrsWidgetAttrDateParserRuleCall_2_0; }
		
		//(',' attrs+=WidgetAttrDate)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//attrs+=WidgetAttrDate
		public Assignment getAttrsAssignment_3_1() { return cAttrsAssignment_3_1; }
		
		//WidgetAttrDate
		public RuleCall getAttrsWidgetAttrDateParserRuleCall_3_1_0() { return cAttrsWidgetAttrDateParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class WidgetTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.WidgetText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWidgetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cWidgetWidgetKeyword_0_0 = (Keyword)cWidgetAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttrsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttrsWidgetAttrTextParserRuleCall_2_0 = (RuleCall)cAttrsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttrsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttrsWidgetAttrTextParserRuleCall_3_1_0 = (RuleCall)cAttrsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WidgetText:
		//	widget='widget' '(' attrs+=WidgetAttrText (',' attrs+=WidgetAttrText)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//widget='widget' '(' attrs+=WidgetAttrText (',' attrs+=WidgetAttrText)* ')'
		public Group getGroup() { return cGroup; }
		
		//widget='widget'
		public Assignment getWidgetAssignment_0() { return cWidgetAssignment_0; }
		
		//'widget'
		public Keyword getWidgetWidgetKeyword_0_0() { return cWidgetWidgetKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//attrs+=WidgetAttrText
		public Assignment getAttrsAssignment_2() { return cAttrsAssignment_2; }
		
		//WidgetAttrText
		public RuleCall getAttrsWidgetAttrTextParserRuleCall_2_0() { return cAttrsWidgetAttrTextParserRuleCall_2_0; }
		
		//(',' attrs+=WidgetAttrText)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//attrs+=WidgetAttrText
		public Assignment getAttrsAssignment_3_1() { return cAttrsAssignment_3_1; }
		
		//WidgetAttrText
		public RuleCall getAttrsWidgetAttrTextParserRuleCall_3_1_0() { return cAttrsWidgetAttrTextParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class WidgetAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.WidgetAttr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWidgetLabelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWidgetHelpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWidgetExposedFilterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWidgetDisplayResultParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//WidgetAttr:
		//	WidgetLabel | WidgetHelp | WidgetExposedFilter | WidgetDisplayResult;
		@Override public ParserRule getRule() { return rule; }
		
		//WidgetLabel | WidgetHelp | WidgetExposedFilter | WidgetDisplayResult
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WidgetLabel
		public RuleCall getWidgetLabelParserRuleCall_0() { return cWidgetLabelParserRuleCall_0; }
		
		//WidgetHelp
		public RuleCall getWidgetHelpParserRuleCall_1() { return cWidgetHelpParserRuleCall_1; }
		
		//WidgetExposedFilter
		public RuleCall getWidgetExposedFilterParserRuleCall_2() { return cWidgetExposedFilterParserRuleCall_2; }
		
		//WidgetDisplayResult
		public RuleCall getWidgetDisplayResultParserRuleCall_3() { return cWidgetDisplayResultParserRuleCall_3; }
	}
	public class WidgetAttrEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.WidgetAttrEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWidgetAttrEnumTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWidgetAttrEnumTypeSelectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWidgetDisplayResultParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//WidgetAttrEnum:
		//	WidgetAttrEnumType | WidgetAttrEnumTypeSelect | WidgetDisplayResult;
		@Override public ParserRule getRule() { return rule; }
		
		//WidgetAttrEnumType | WidgetAttrEnumTypeSelect | WidgetDisplayResult
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WidgetAttrEnumType
		public RuleCall getWidgetAttrEnumTypeParserRuleCall_0() { return cWidgetAttrEnumTypeParserRuleCall_0; }
		
		//WidgetAttrEnumTypeSelect
		public RuleCall getWidgetAttrEnumTypeSelectParserRuleCall_1() { return cWidgetAttrEnumTypeSelectParserRuleCall_1; }
		
		//WidgetDisplayResult
		public RuleCall getWidgetDisplayResultParserRuleCall_2() { return cWidgetDisplayResultParserRuleCall_2; }
	}
	public class WidgetAttrEnumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.WidgetAttrEnumType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWidgetLabelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWidgetHelpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWidgetExposedFilterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWidgetTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//WidgetAttrEnumType:
		//	WidgetLabel | WidgetHelp | WidgetExposedFilter | WidgetType;
		@Override public ParserRule getRule() { return rule; }
		
		//WidgetLabel | WidgetHelp | WidgetExposedFilter | WidgetType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WidgetLabel
		public RuleCall getWidgetLabelParserRuleCall_0() { return cWidgetLabelParserRuleCall_0; }
		
		//WidgetHelp
		public RuleCall getWidgetHelpParserRuleCall_1() { return cWidgetHelpParserRuleCall_1; }
		
		//WidgetExposedFilter
		public RuleCall getWidgetExposedFilterParserRuleCall_2() { return cWidgetExposedFilterParserRuleCall_2; }
		
		//WidgetType
		public RuleCall getWidgetTypeParserRuleCall_3() { return cWidgetTypeParserRuleCall_3; }
	}
	public class WidgetAttrEnumTypeSelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.WidgetAttrEnumTypeSelect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWidgetTypeSelectParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSortbyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSortbyWidgetSortByParserRuleCall_1_1_0 = (RuleCall)cSortbyAssignment_1_1.eContents().get(0);
		
		//WidgetAttrEnumTypeSelect:
		//	WidgetTypeSelect (',' sortby=WidgetSortBy)?;
		@Override public ParserRule getRule() { return rule; }
		
		//WidgetTypeSelect (',' sortby=WidgetSortBy)?
		public Group getGroup() { return cGroup; }
		
		//WidgetTypeSelect
		public RuleCall getWidgetTypeSelectParserRuleCall_0() { return cWidgetTypeSelectParserRuleCall_0; }
		
		//(',' sortby=WidgetSortBy)?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//sortby=WidgetSortBy
		public Assignment getSortbyAssignment_1_1() { return cSortbyAssignment_1_1; }
		
		//WidgetSortBy
		public RuleCall getSortbyWidgetSortByParserRuleCall_1_1_0() { return cSortbyWidgetSortByParserRuleCall_1_1_0; }
	}
	public class WidgetAttrDateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.WidgetAttrDate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWidgetLabelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWidgetHelpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWidgetExposedFilterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWidgetStartYearParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWidgetEndYearParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cWidgetDisplayResultParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//WidgetAttrDate:
		//	WidgetLabel | WidgetHelp | WidgetExposedFilter | WidgetStartYear | WidgetEndYear | WidgetDisplayResult;
		@Override public ParserRule getRule() { return rule; }
		
		//WidgetLabel | WidgetHelp | WidgetExposedFilter | WidgetStartYear | WidgetEndYear | WidgetDisplayResult
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WidgetLabel
		public RuleCall getWidgetLabelParserRuleCall_0() { return cWidgetLabelParserRuleCall_0; }
		
		//WidgetHelp
		public RuleCall getWidgetHelpParserRuleCall_1() { return cWidgetHelpParserRuleCall_1; }
		
		//WidgetExposedFilter
		public RuleCall getWidgetExposedFilterParserRuleCall_2() { return cWidgetExposedFilterParserRuleCall_2; }
		
		//WidgetStartYear
		public RuleCall getWidgetStartYearParserRuleCall_3() { return cWidgetStartYearParserRuleCall_3; }
		
		//WidgetEndYear
		public RuleCall getWidgetEndYearParserRuleCall_4() { return cWidgetEndYearParserRuleCall_4; }
		
		//WidgetDisplayResult
		public RuleCall getWidgetDisplayResultParserRuleCall_5() { return cWidgetDisplayResultParserRuleCall_5; }
	}
	public class WidgetAttrTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.WidgetAttrText");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWidgetLabelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWidgetHelpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWidgetExposedFilterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWidgetSizeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWidgetDisplayResultParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//WidgetAttrText:
		//	WidgetLabel | WidgetHelp | WidgetExposedFilter | WidgetSize | WidgetDisplayResult;
		@Override public ParserRule getRule() { return rule; }
		
		//WidgetLabel | WidgetHelp | WidgetExposedFilter | WidgetSize | WidgetDisplayResult
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WidgetLabel
		public RuleCall getWidgetLabelParserRuleCall_0() { return cWidgetLabelParserRuleCall_0; }
		
		//WidgetHelp
		public RuleCall getWidgetHelpParserRuleCall_1() { return cWidgetHelpParserRuleCall_1; }
		
		//WidgetExposedFilter
		public RuleCall getWidgetExposedFilterParserRuleCall_2() { return cWidgetExposedFilterParserRuleCall_2; }
		
		//WidgetSize
		public RuleCall getWidgetSizeParserRuleCall_3() { return cWidgetSizeParserRuleCall_3; }
		
		//WidgetDisplayResult
		public RuleCall getWidgetDisplayResultParserRuleCall_4() { return cWidgetDisplayResultParserRuleCall_4; }
	}
	public class WidgetSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.WidgetSize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeWidgetSizeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//WidgetSize:
		//	'size' ':' type=WidgetSizeType;
		@Override public ParserRule getRule() { return rule; }
		
		//'size' ':' type=WidgetSizeType
		public Group getGroup() { return cGroup; }
		
		//'size'
		public Keyword getSizeKeyword_0() { return cSizeKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=WidgetSizeType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//WidgetSizeType
		public RuleCall getTypeWidgetSizeTypeParserRuleCall_2_0() { return cTypeWidgetSizeTypeParserRuleCall_2_0; }
	}
	public class WidgetSizeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.WidgetSizeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cXSKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSMKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMDKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLGKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cXLKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//WidgetSizeType:
		//	'XS' | 'SM' | 'MD' | 'LG' | 'XL';
		@Override public ParserRule getRule() { return rule; }
		
		//'XS' | 'SM' | 'MD' | 'LG' | 'XL'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'XS'
		public Keyword getXSKeyword_0() { return cXSKeyword_0; }
		
		//'SM'
		public Keyword getSMKeyword_1() { return cSMKeyword_1; }
		
		//'MD'
		public Keyword getMDKeyword_2() { return cMDKeyword_2; }
		
		//'LG'
		public Keyword getLGKeyword_3() { return cLGKeyword_3; }
		
		//'XL'
		public Keyword getXLKeyword_4() { return cXLKeyword_4; }
	}
	public class WidgetDisplayResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.WidgetDisplayResult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDisplay_resultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDisplay_resultAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cDisplay_resultAlternatives_2_0 = (Alternatives)cDisplay_resultAssignment_2.eContents().get(0);
		private final Keyword cDisplay_resultTrueKeyword_2_0_0 = (Keyword)cDisplay_resultAlternatives_2_0.eContents().get(0);
		private final Keyword cDisplay_resultFalseKeyword_2_0_1 = (Keyword)cDisplay_resultAlternatives_2_0.eContents().get(1);
		
		//WidgetDisplayResult:
		//	'display_result' ':' display_result=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//'display_result' ':' display_result=('true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//'display_result'
		public Keyword getDisplay_resultKeyword_0() { return cDisplay_resultKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//display_result=('true' | 'false')
		public Assignment getDisplay_resultAssignment_2() { return cDisplay_resultAssignment_2; }
		
		//('true' | 'false')
		public Alternatives getDisplay_resultAlternatives_2_0() { return cDisplay_resultAlternatives_2_0; }
		
		//'true'
		public Keyword getDisplay_resultTrueKeyword_2_0_0() { return cDisplay_resultTrueKeyword_2_0_0; }
		
		//'false'
		public Keyword getDisplay_resultFalseKeyword_2_0_1() { return cDisplay_resultFalseKeyword_2_0_1; }
	}
	public class BOOLEANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.BOOLEAN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		////Types
		//BOOLEAN:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class DATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.DATE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDATEAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cDateAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDateDATETIMETerminalRuleCall_0_1_0 = (RuleCall)cDateAssignment_0_1.eContents().get(0);
		private final Assignment cNowAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNowNowKeyword_1_0 = (Keyword)cNowAssignment_1.eContents().get(0);
		
		//DATE:
		//	{DATE} date=DATETIME | now='Now';
		@Override public ParserRule getRule() { return rule; }
		
		//{DATE} date=DATETIME | now='Now'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{DATE} date=DATETIME
		public Group getGroup_0() { return cGroup_0; }
		
		//{DATE}
		public Action getDATEAction_0_0() { return cDATEAction_0_0; }
		
		//date=DATETIME
		public Assignment getDateAssignment_0_1() { return cDateAssignment_0_1; }
		
		//DATETIME
		public RuleCall getDateDATETIMETerminalRuleCall_0_1_0() { return cDateDATETIMETerminalRuleCall_0_1_0; }
		
		//now='Now'
		public Assignment getNowAssignment_1() { return cNowAssignment_1; }
		
		//'Now'
		public Keyword getNowNowKeyword_1_0() { return cNowNowKeyword_1_0; }
	}
	public class MONTHElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.MONTH");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cJanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFebKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMarKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAprKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cMayKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cJunKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cJulKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cAugKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cSepKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cOctKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cNovKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cDecKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		//MONTH:
		//	'Jan' | 'Feb' | 'Mar' | 'Apr' | 'May' | 'Jun' | 'Jul' | 'Aug' | 'Sep' | 'Oct' | 'Nov' | 'Dec';
		@Override public ParserRule getRule() { return rule; }
		
		//'Jan' | 'Feb' | 'Mar' | 'Apr' | 'May' | 'Jun' | 'Jul' | 'Aug' | 'Sep' | 'Oct' | 'Nov' | 'Dec'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Jan'
		public Keyword getJanKeyword_0() { return cJanKeyword_0; }
		
		//'Feb'
		public Keyword getFebKeyword_1() { return cFebKeyword_1; }
		
		//'Mar'
		public Keyword getMarKeyword_2() { return cMarKeyword_2; }
		
		//'Apr'
		public Keyword getAprKeyword_3() { return cAprKeyword_3; }
		
		//'May'
		public Keyword getMayKeyword_4() { return cMayKeyword_4; }
		
		//'Jun'
		public Keyword getJunKeyword_5() { return cJunKeyword_5; }
		
		//'Jul'
		public Keyword getJulKeyword_6() { return cJulKeyword_6; }
		
		//'Aug'
		public Keyword getAugKeyword_7() { return cAugKeyword_7; }
		
		//'Sep'
		public Keyword getSepKeyword_8() { return cSepKeyword_8; }
		
		//'Oct'
		public Keyword getOctKeyword_9() { return cOctKeyword_9; }
		
		//'Nov'
		public Keyword getNovKeyword_10() { return cNovKeyword_10; }
		
		//'Dec'
		public Keyword getDecKeyword_11() { return cDecKeyword_11; }
	}
	public class ActionSearchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.ActionSearch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSearchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValueSimpleKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValueComplexKeyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		private final Keyword cValueNoneKeyword_2_0_2 = (Keyword)cValueAlternatives_2_0.eContents().get(2);
		
		//ActionSearch:
		//	'search' ':' value=('Simple' | 'Complex' | 'None');
		@Override public ParserRule getRule() { return rule; }
		
		//'search' ':' value=('Simple' | 'Complex' | 'None')
		public Group getGroup() { return cGroup; }
		
		//'search'
		public Keyword getSearchKeyword_0() { return cSearchKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=('Simple' | 'Complex' | 'None')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('Simple' | 'Complex' | 'None')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'Simple'
		public Keyword getValueSimpleKeyword_2_0_0() { return cValueSimpleKeyword_2_0_0; }
		
		//'Complex'
		public Keyword getValueComplexKeyword_2_0_1() { return cValueComplexKeyword_2_0_1; }
		
		//'None'
		public Keyword getValueNoneKeyword_2_0_2() { return cValueNoneKeyword_2_0_2; }
	}
	public class ActionAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.ActionAdd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		
		//ActionAdd:
		//	'add' ':' value=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//'add' ':' value=('true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//'add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_0_0() { return cValueTrueKeyword_2_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_0_1() { return cValueFalseKeyword_2_0_1; }
	}
	public class ActionEditElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.ActionEdit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEditKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		
		//ActionEdit:
		//	'edit' ':' value=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//'edit' ':' value=('true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//'edit'
		public Keyword getEditKeyword_0() { return cEditKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_0_0() { return cValueTrueKeyword_2_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_0_1() { return cValueFalseKeyword_2_0_1; }
	}
	public class ActionDeleteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.ActionDelete");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		
		//ActionDelete:
		//	'delete' ':' value=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//'delete' ':' value=('true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//'delete'
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_0_0() { return cValueTrueKeyword_2_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_0_1() { return cValueFalseKeyword_2_0_1; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActionSearchParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActionAddParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActionEditParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cActionDeleteParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Action:
		//	ActionSearch | ActionAdd | ActionEdit | ActionDelete;
		@Override public ParserRule getRule() { return rule; }
		
		//ActionSearch | ActionAdd | ActionEdit | ActionDelete
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ActionSearch
		public RuleCall getActionSearchParserRuleCall_0() { return cActionSearchParserRuleCall_0; }
		
		//ActionAdd
		public RuleCall getActionAddParserRuleCall_1() { return cActionAddParserRuleCall_1; }
		
		//ActionEdit
		public RuleCall getActionEditParserRuleCall_2() { return cActionEditParserRuleCall_2; }
		
		//ActionDelete
		public RuleCall getActionDeleteParserRuleCall_3() { return cActionDeleteParserRuleCall_3; }
	}
	public class ActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.Actions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScaffoldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionActionParserRuleCall_2_0 = (RuleCall)cActionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cActionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cActionActionParserRuleCall_3_1_0 = (RuleCall)cActionAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Actions:
		//	'scaffold' '(' action+=Action (',' action+=Action)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'scaffold' '(' action+=Action (',' action+=Action)* ')'
		public Group getGroup() { return cGroup; }
		
		//'scaffold'
		public Keyword getScaffoldKeyword_0() { return cScaffoldKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//action+=Action
		public Assignment getActionAssignment_2() { return cActionAssignment_2; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_2_0() { return cActionActionParserRuleCall_2_0; }
		
		//(',' action+=Action)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//action+=Action
		public Assignment getActionAssignment_3_1() { return cActionAssignment_3_1; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_3_1_0() { return cActionActionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DBMapEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.DBMapEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDb_mapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTableKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTableSTRINGTerminalRuleCall_4_0 = (RuleCall)cTableAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cDbmap_attrsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cDbmap_attrsDBMapAttrParserRuleCall_5_1_1_0 = (RuleCall)cDbmap_attrsAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_5_1_2 = (Group)cGroup_5_1.eContents().get(2);
		private final Keyword cCommaKeyword_5_1_2_0 = (Keyword)cGroup_5_1_2.eContents().get(0);
		private final Assignment cDbmap_attrsAssignment_5_1_2_1 = (Assignment)cGroup_5_1_2.eContents().get(1);
		private final RuleCall cDbmap_attrsDBMapAttrParserRuleCall_5_1_2_1_0 = (RuleCall)cDbmap_attrsAssignment_5_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_1_3 = (Keyword)cGroup_5_1.eContents().get(3);
		
		//DBMapEntity:
		//	'db_map' '('
		//	'table' ':' table=STRING (')' | ','
		//	dbmap_attrs+=DBMapAttr (',' dbmap_attrs+=DBMapAttr)* ')');
		@Override public ParserRule getRule() { return rule; }
		
		//'db_map' '(' 'table' ':' table=STRING (')' | ',' dbmap_attrs+=DBMapAttr (',' dbmap_attrs+=DBMapAttr)* ')')
		public Group getGroup() { return cGroup; }
		
		//'db_map'
		public Keyword getDb_mapKeyword_0() { return cDb_mapKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'table'
		public Keyword getTableKeyword_2() { return cTableKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//table=STRING
		public Assignment getTableAssignment_4() { return cTableAssignment_4; }
		
		//STRING
		public RuleCall getTableSTRINGTerminalRuleCall_4_0() { return cTableSTRINGTerminalRuleCall_4_0; }
		
		//')' | ',' dbmap_attrs+=DBMapAttr (',' dbmap_attrs+=DBMapAttr)* ')'
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_0() { return cRightParenthesisKeyword_5_0; }
		
		//',' dbmap_attrs+=DBMapAttr (',' dbmap_attrs+=DBMapAttr)* ')'
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//dbmap_attrs+=DBMapAttr
		public Assignment getDbmap_attrsAssignment_5_1_1() { return cDbmap_attrsAssignment_5_1_1; }
		
		//DBMapAttr
		public RuleCall getDbmap_attrsDBMapAttrParserRuleCall_5_1_1_0() { return cDbmap_attrsDBMapAttrParserRuleCall_5_1_1_0; }
		
		//(',' dbmap_attrs+=DBMapAttr)*
		public Group getGroup_5_1_2() { return cGroup_5_1_2; }
		
		//','
		public Keyword getCommaKeyword_5_1_2_0() { return cCommaKeyword_5_1_2_0; }
		
		//dbmap_attrs+=DBMapAttr
		public Assignment getDbmap_attrsAssignment_5_1_2_1() { return cDbmap_attrsAssignment_5_1_2_1; }
		
		//DBMapAttr
		public RuleCall getDbmap_attrsDBMapAttrParserRuleCall_5_1_2_1_0() { return cDbmap_attrsDBMapAttrParserRuleCall_5_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_1_3() { return cRightParenthesisKeyword_5_1_3; }
	}
	public class DBMapAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.DBMapAttr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDBMapAttrIdentityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDBMapAttrAutoIdParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DBMapAttr:
		//	DBMapAttrIdentity | DBMapAttrAutoId;
		@Override public ParserRule getRule() { return rule; }
		
		//DBMapAttrIdentity | DBMapAttrAutoId
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DBMapAttrIdentity
		public RuleCall getDBMapAttrIdentityParserRuleCall_0() { return cDBMapAttrIdentityParserRuleCall_0; }
		
		//DBMapAttrAutoId
		public RuleCall getDBMapAttrAutoIdParserRuleCall_1() { return cDBMapAttrAutoIdParserRuleCall_1; }
	}
	public class DBMapAttrIdentityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.DBMapAttrIdentity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdentityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdentityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdentitySTRINGTerminalRuleCall_2_0 = (RuleCall)cIdentityAssignment_2.eContents().get(0);
		
		//DBMapAttrIdentity:
		//	'identity' ':' identity=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'identity' ':' identity=STRING
		public Group getGroup() { return cGroup; }
		
		//'identity'
		public Keyword getIdentityKeyword_0() { return cIdentityKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//identity=STRING
		public Assignment getIdentityAssignment_2() { return cIdentityAssignment_2; }
		
		//STRING
		public RuleCall getIdentitySTRINGTerminalRuleCall_2_0() { return cIdentitySTRINGTerminalRuleCall_2_0; }
	}
	public class DBMapAttrAutoIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.DBMapAttrAutoId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAuto_idKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAutoidAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cAutoidAlternatives_2_0 = (Alternatives)cAutoidAssignment_2.eContents().get(0);
		private final Keyword cAutoidTrueKeyword_2_0_0 = (Keyword)cAutoidAlternatives_2_0.eContents().get(0);
		private final Keyword cAutoidFalseKeyword_2_0_1 = (Keyword)cAutoidAlternatives_2_0.eContents().get(1);
		
		//DBMapAttrAutoId:
		//	'auto_id' ':' autoid=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//'auto_id' ':' autoid=('true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//'auto_id'
		public Keyword getAuto_idKeyword_0() { return cAuto_idKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//autoid=('true' | 'false')
		public Assignment getAutoidAssignment_2() { return cAutoidAssignment_2; }
		
		//('true' | 'false')
		public Alternatives getAutoidAlternatives_2_0() { return cAutoidAlternatives_2_0; }
		
		//'true'
		public Keyword getAutoidTrueKeyword_2_0_0() { return cAutoidTrueKeyword_2_0_0; }
		
		//'false'
		public Keyword getAutoidFalseKeyword_2_0_1() { return cAutoidFalseKeyword_2_0_1; }
	}
	public class DBMapFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.DBMapField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDb_mapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFieldKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTableSTRINGTerminalRuleCall_4_0 = (RuleCall)cTableAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cPkKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Keyword cColonKeyword_5_1_2 = (Keyword)cGroup_5_1.eContents().get(2);
		private final Assignment cPkAssignment_5_1_3 = (Assignment)cGroup_5_1.eContents().get(3);
		private final Alternatives cPkAlternatives_5_1_3_0 = (Alternatives)cPkAssignment_5_1_3.eContents().get(0);
		private final Keyword cPkTrueKeyword_5_1_3_0_0 = (Keyword)cPkAlternatives_5_1_3_0.eContents().get(0);
		private final Keyword cPkFalseKeyword_5_1_3_0_1 = (Keyword)cPkAlternatives_5_1_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_1_4 = (Keyword)cGroup_5_1.eContents().get(4);
		
		//DBMapField:
		//	'db_map' '(' 'field' ':' table=STRING (')' | ',' 'pk' ':' pk=('true' | 'false') ')');
		@Override public ParserRule getRule() { return rule; }
		
		//'db_map' '(' 'field' ':' table=STRING (')' | ',' 'pk' ':' pk=('true' | 'false') ')')
		public Group getGroup() { return cGroup; }
		
		//'db_map'
		public Keyword getDb_mapKeyword_0() { return cDb_mapKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'field'
		public Keyword getFieldKeyword_2() { return cFieldKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//table=STRING
		public Assignment getTableAssignment_4() { return cTableAssignment_4; }
		
		//STRING
		public RuleCall getTableSTRINGTerminalRuleCall_4_0() { return cTableSTRINGTerminalRuleCall_4_0; }
		
		//')' | ',' 'pk' ':' pk=('true' | 'false') ')'
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_0() { return cRightParenthesisKeyword_5_0; }
		
		//',' 'pk' ':' pk=('true' | 'false') ')'
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//'pk'
		public Keyword getPkKeyword_5_1_1() { return cPkKeyword_5_1_1; }
		
		//':'
		public Keyword getColonKeyword_5_1_2() { return cColonKeyword_5_1_2; }
		
		//pk=('true' | 'false')
		public Assignment getPkAssignment_5_1_3() { return cPkAssignment_5_1_3; }
		
		//('true' | 'false')
		public Alternatives getPkAlternatives_5_1_3_0() { return cPkAlternatives_5_1_3_0; }
		
		//'true'
		public Keyword getPkTrueKeyword_5_1_3_0_0() { return cPkTrueKeyword_5_1_3_0_0; }
		
		//'false'
		public Keyword getPkFalseKeyword_5_1_3_0_1() { return cPkFalseKeyword_5_1_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_1_4() { return cRightParenthesisKeyword_5_1_4; }
	}
	public class DataDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.DataDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDomainKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDomainAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDomainSTRINGTerminalRuleCall_4_0 = (RuleCall)cDomainAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DataDomain:
		//	'data' '(' 'domain' ':' domain=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'data' '(' 'domain' ':' domain=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'data'
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'domain'
		public Keyword getDomainKeyword_2() { return cDomainKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//domain=STRING
		public Assignment getDomainAssignment_4() { return cDomainAssignment_4; }
		
		//STRING
		public RuleCall getDomainSTRINGTerminalRuleCall_4_0() { return cDomainSTRINGTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class BusinessRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.BusinessRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBusiness_ruleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCodeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCodeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCodeSTRINGTerminalRuleCall_4_0 = (RuleCall)cCodeAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cDescriptionKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDescriptionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_8_0 = (RuleCall)cDescriptionAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//BusinessRule:
		//	'business_rule' '(' 'code' ':' code=STRING ',' 'description' ':' description=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'business_rule' '(' 'code' ':' code=STRING ',' 'description' ':' description=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'business_rule'
		public Keyword getBusiness_ruleKeyword_0() { return cBusiness_ruleKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'code'
		public Keyword getCodeKeyword_2() { return cCodeKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//code=STRING
		public Assignment getCodeAssignment_4() { return cCodeAssignment_4; }
		
		//STRING
		public RuleCall getCodeSTRINGTerminalRuleCall_4_0() { return cCodeSTRINGTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'description'
		public Keyword getDescriptionKeyword_6() { return cDescriptionKeyword_6; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_8() { return cDescriptionAssignment_8; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_8_0() { return cDescriptionSTRINGTerminalRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	
	
	private final ModelElements pModel;
	private final ModuleElements pModule;
	private final TerminalRule tID;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final AbstractElementElements pAbstractElement;
	private final EnumElements pEnum;
	private final EnumLiteralElements pEnumLiteral;
	private final EntityElements pEntity;
	private final MethodDeclarationElements pMethodDeclaration;
	private final StatementElements pStatement;
	private final StatementReturnElements pStatementReturn;
	private final EntityFieldElements pEntityField;
	private final EntityTextConstraintDefElements pEntityTextConstraintDef;
	private final EntityTextConstraintElements pEntityTextConstraint;
	private final EntityTextFieldElements pEntityTextField;
	private final EntityTextFieldAttrElements pEntityTextFieldAttr;
	private final EntityLongTextFieldElements pEntityLongTextField;
	private final EntityLongTextFieldAttrElements pEntityLongTextFieldAttr;
	private final EntityDateFieldElements pEntityDateField;
	private final EntityDateFieldAttrElements pEntityDateFieldAttr;
	private final EntityReferenceFieldElements pEntityReferenceField;
	private final CardinalityUpperBoundElements pCardinalityUpperBound;
	private final EntityReferenceFieldAttrElements pEntityReferenceFieldAttr;
	private final EnumEntityElements pEnumEntity;
	private final EntityImageFieldElements pEntityImageField;
	private final EntityFileFieldElements pEntityFileField;
	private final EntityEmailFieldElements pEntityEmailField;
	private final EntityDecimalFieldElements pEntityDecimalField;
	private final EntityIntegerFieldElements pEntityIntegerField;
	private final EntityCurrencyFieldElements pEntityCurrencyField;
	private final EntityAttrElements pEntityAttr;
	private final ConstraintRequiredElements pConstraintRequired;
	private final ConstraintUniqueElements pConstraintUnique;
	private final ConstraintMaxLengthElements pConstraintMaxLength;
	private final ConstraintMinLengthElements pConstraintMinLength;
	private final GlossaryElements pGlossary;
	private final GlossaryNameElements pGlossaryName;
	private final GlossaryDescriptionElements pGlossaryDescription;
	private final WidgetLabelElements pWidgetLabel;
	private final WidgetHelpElements pWidgetHelp;
	private final WidgetExposedFilterElements pWidgetExposedFilter;
	private final WidgetTypeElements pWidgetType;
	private final WidgetTypeSelectElements pWidgetTypeSelect;
	private final WidgetSortByElements pWidgetSortBy;
	private final WidgetStartYearElements pWidgetStartYear;
	private final WidgetEndYearElements pWidgetEndYear;
	private final WidgetElements pWidget;
	private final WidgetEnumElements pWidgetEnum;
	private final WidgetDateElements pWidgetDate;
	private final WidgetTextElements pWidgetText;
	private final WidgetAttrElements pWidgetAttr;
	private final WidgetAttrEnumElements pWidgetAttrEnum;
	private final WidgetAttrEnumTypeElements pWidgetAttrEnumType;
	private final WidgetAttrEnumTypeSelectElements pWidgetAttrEnumTypeSelect;
	private final WidgetAttrDateElements pWidgetAttrDate;
	private final WidgetAttrTextElements pWidgetAttrText;
	private final WidgetSizeElements pWidgetSize;
	private final WidgetSizeTypeElements pWidgetSizeType;
	private final WidgetDisplayResultElements pWidgetDisplayResult;
	private final BOOLEANElements pBOOLEAN;
	private final DATEElements pDATE;
	private final MONTHElements pMONTH;
	private final ActionSearchElements pActionSearch;
	private final ActionAddElements pActionAdd;
	private final ActionEditElements pActionEdit;
	private final ActionDeleteElements pActionDelete;
	private final ActionElements pAction;
	private final ActionsElements pActions;
	private final TerminalRule tDATETIME;
	private final DBMapEntityElements pDBMapEntity;
	private final DBMapAttrElements pDBMapAttr;
	private final DBMapAttrIdentityElements pDBMapAttrIdentity;
	private final DBMapAttrAutoIdElements pDBMapAttrAutoId;
	private final DBMapFieldElements pDBMapField;
	private final DataDomainElements pDataDomain;
	private final BusinessRuleElements pBusinessRule;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RdlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pModule = new ModuleElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.ID");
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pEnum = new EnumElements();
		this.pEnumLiteral = new EnumLiteralElements();
		this.pEntity = new EntityElements();
		this.pMethodDeclaration = new MethodDeclarationElements();
		this.pStatement = new StatementElements();
		this.pStatementReturn = new StatementReturnElements();
		this.pEntityField = new EntityFieldElements();
		this.pEntityTextConstraintDef = new EntityTextConstraintDefElements();
		this.pEntityTextConstraint = new EntityTextConstraintElements();
		this.pEntityTextField = new EntityTextFieldElements();
		this.pEntityTextFieldAttr = new EntityTextFieldAttrElements();
		this.pEntityLongTextField = new EntityLongTextFieldElements();
		this.pEntityLongTextFieldAttr = new EntityLongTextFieldAttrElements();
		this.pEntityDateField = new EntityDateFieldElements();
		this.pEntityDateFieldAttr = new EntityDateFieldAttrElements();
		this.pEntityReferenceField = new EntityReferenceFieldElements();
		this.pCardinalityUpperBound = new CardinalityUpperBoundElements();
		this.pEntityReferenceFieldAttr = new EntityReferenceFieldAttrElements();
		this.pEnumEntity = new EnumEntityElements();
		this.pEntityImageField = new EntityImageFieldElements();
		this.pEntityFileField = new EntityFileFieldElements();
		this.pEntityEmailField = new EntityEmailFieldElements();
		this.pEntityDecimalField = new EntityDecimalFieldElements();
		this.pEntityIntegerField = new EntityIntegerFieldElements();
		this.pEntityCurrencyField = new EntityCurrencyFieldElements();
		this.pEntityAttr = new EntityAttrElements();
		this.pConstraintRequired = new ConstraintRequiredElements();
		this.pConstraintUnique = new ConstraintUniqueElements();
		this.pConstraintMaxLength = new ConstraintMaxLengthElements();
		this.pConstraintMinLength = new ConstraintMinLengthElements();
		this.pGlossary = new GlossaryElements();
		this.pGlossaryName = new GlossaryNameElements();
		this.pGlossaryDescription = new GlossaryDescriptionElements();
		this.pWidgetLabel = new WidgetLabelElements();
		this.pWidgetHelp = new WidgetHelpElements();
		this.pWidgetExposedFilter = new WidgetExposedFilterElements();
		this.pWidgetType = new WidgetTypeElements();
		this.pWidgetTypeSelect = new WidgetTypeSelectElements();
		this.pWidgetSortBy = new WidgetSortByElements();
		this.pWidgetStartYear = new WidgetStartYearElements();
		this.pWidgetEndYear = new WidgetEndYearElements();
		this.pWidget = new WidgetElements();
		this.pWidgetEnum = new WidgetEnumElements();
		this.pWidgetDate = new WidgetDateElements();
		this.pWidgetText = new WidgetTextElements();
		this.pWidgetAttr = new WidgetAttrElements();
		this.pWidgetAttrEnum = new WidgetAttrEnumElements();
		this.pWidgetAttrEnumType = new WidgetAttrEnumTypeElements();
		this.pWidgetAttrEnumTypeSelect = new WidgetAttrEnumTypeSelectElements();
		this.pWidgetAttrDate = new WidgetAttrDateElements();
		this.pWidgetAttrText = new WidgetAttrTextElements();
		this.pWidgetSize = new WidgetSizeElements();
		this.pWidgetSizeType = new WidgetSizeTypeElements();
		this.pWidgetDisplayResult = new WidgetDisplayResultElements();
		this.pBOOLEAN = new BOOLEANElements();
		this.pDATE = new DATEElements();
		this.pMONTH = new MONTHElements();
		this.pActionSearch = new ActionSearchElements();
		this.pActionAdd = new ActionAddElements();
		this.pActionEdit = new ActionEditElements();
		this.pActionDelete = new ActionDeleteElements();
		this.pAction = new ActionElements();
		this.pActions = new ActionsElements();
		this.tDATETIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.softtek.Rdl.DATETIME");
		this.pDBMapEntity = new DBMapEntityElements();
		this.pDBMapAttr = new DBMapAttrElements();
		this.pDBMapAttrIdentity = new DBMapAttrIdentityElements();
		this.pDBMapAttrAutoId = new DBMapAttrAutoIdElements();
		this.pDBMapField = new DBMapFieldElements();
		this.pDataDomain = new DataDomainElements();
		this.pBusinessRule = new BusinessRuleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.softtek.Rdl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	module=Module;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Module:
	//	'module' name=QualifiedName '{'
	//	elements+=AbstractElement*
	//	'}';
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//@Override
	//terminal ID:
	//	('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//AbstractElement:
	//	Enum | Entity;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//Enum:
	//	'enum' name=ID '{'
	//	enum_literals+=EnumLiteral+
	//	'}';
	public EnumElements getEnumAccess() {
		return pEnum;
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}
	
	//EnumLiteral:
	//	key=ID ':' value=STRING;
	public EnumLiteralElements getEnumLiteralAccess() {
		return pEnumLiteral;
	}
	
	public ParserRule getEnumLiteralRule() {
		return getEnumLiteralAccess().getRule();
	}
	
	//Entity:
	//	'entity' name=ID '{'
	//	actions=Actions?
	//	glossary=Glossary?
	//	db_map=DBMapEntity?
	//	entity_fields+=EntityField+
	//	entity_methods+=MethodDeclaration*
	//	'}';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//MethodDeclaration:
	//	'def' name=ID '{'
	//	def_statements+=Statement+
	//	'}';
	public MethodDeclarationElements getMethodDeclarationAccess() {
		return pMethodDeclaration;
	}
	
	public ParserRule getMethodDeclarationRule() {
		return getMethodDeclarationAccess().getRule();
	}
	
	//Statement:
	//	StatementReturn;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//StatementReturn:
	//	'return' entityfield=[EntityField|QualifiedName];
	public StatementReturnElements getStatementReturnAccess() {
		return pStatementReturn;
	}
	
	public ParserRule getStatementReturnRule() {
		return getStatementReturnAccess().getRule();
	}
	
	//EntityField:
	//	EntityReferenceField | EntityTextField | EntityLongTextField | EntityDateField | EntityImageField | EntityFileField |
	//	EntityEmailField | EntityDecimalField | EntityIntegerField | EntityCurrencyField;
	public EntityFieldElements getEntityFieldAccess() {
		return pEntityField;
	}
	
	public ParserRule getEntityFieldRule() {
		return getEntityFieldAccess().getRule();
	}
	
	//EntityTextConstraintDef:
	//	'constraints' '(' constraints+=EntityTextConstraint (',' constraints+=EntityTextConstraint)* ')';
	public EntityTextConstraintDefElements getEntityTextConstraintDefAccess() {
		return pEntityTextConstraintDef;
	}
	
	public ParserRule getEntityTextConstraintDefRule() {
		return getEntityTextConstraintDefAccess().getRule();
	}
	
	//EntityTextConstraint:
	//	ConstraintRequired | ConstraintUnique | ConstraintMaxLength | ConstraintMinLength;
	public EntityTextConstraintElements getEntityTextConstraintAccess() {
		return pEntityTextConstraint;
	}
	
	public ParserRule getEntityTextConstraintRule() {
		return getEntityTextConstraintAccess().getRule();
	}
	
	//EntityTextField:
	//	'field' name=ID ':' 'Text' ('{'
	//	attrs+=EntityTextFieldAttr+
	//	'}')?;
	public EntityTextFieldElements getEntityTextFieldAccess() {
		return pEntityTextField;
	}
	
	public ParserRule getEntityTextFieldRule() {
		return getEntityTextFieldAccess().getRule();
	}
	
	//EntityTextFieldAttr:
	//	glossary=Glossary | widget=WidgetText | constraint=EntityTextConstraintDef | db_map=DBMapField |
	//	data_domain=DataDomain | business_rule=BusinessRule;
	public EntityTextFieldAttrElements getEntityTextFieldAttrAccess() {
		return pEntityTextFieldAttr;
	}
	
	public ParserRule getEntityTextFieldAttrRule() {
		return getEntityTextFieldAttrAccess().getRule();
	}
	
	//EntityLongTextField:
	//	'field' name=ID ':' 'LongText' ('{'
	//	attrs+=EntityLongTextFieldAttr+
	//	'}')?;
	public EntityLongTextFieldElements getEntityLongTextFieldAccess() {
		return pEntityLongTextField;
	}
	
	public ParserRule getEntityLongTextFieldRule() {
		return getEntityLongTextFieldAccess().getRule();
	}
	
	//EntityLongTextFieldAttr:
	//	glossary=Glossary | widget=Widget | constraint=EntityTextConstraintDef | db_map=DBMapField | data_domain=DataDomain |
	//	business_rule=BusinessRule;
	public EntityLongTextFieldAttrElements getEntityLongTextFieldAttrAccess() {
		return pEntityLongTextFieldAttr;
	}
	
	public ParserRule getEntityLongTextFieldAttrRule() {
		return getEntityLongTextFieldAttrAccess().getRule();
	}
	
	//EntityDateField:
	//	'field' name=ID ':' 'Date' ('{'
	//	attrs+=EntityDateFieldAttr+
	//	'}')?;
	public EntityDateFieldElements getEntityDateFieldAccess() {
		return pEntityDateField;
	}
	
	public ParserRule getEntityDateFieldRule() {
		return getEntityDateFieldAccess().getRule();
	}
	
	//EntityDateFieldAttr:
	//	'default' ':' default=DATE | glossary=Glossary | widget=WidgetDate | constraint=EntityTextConstraintDef |
	//	db_map=DBMapField | data_domain=DataDomain | business_rule=BusinessRule;
	public EntityDateFieldAttrElements getEntityDateFieldAttrAccess() {
		return pEntityDateFieldAttr;
	}
	
	public ParserRule getEntityDateFieldAttrRule() {
		return getEntityDateFieldAttrAccess().getRule();
	}
	
	//EntityReferenceField:
	//	'reference' name=ID ':' superType=[EnumEntity|QualifiedName] '[' lowerBound=INT '..' upperBound=CardinalityUpperBound
	//	']' ('opposite-of' opposite=[EntityReferenceField|QualifiedName])? ('{'
	//	attrs+=EntityReferenceFieldAttr+
	//	'}')?;
	public EntityReferenceFieldElements getEntityReferenceFieldAccess() {
		return pEntityReferenceField;
	}
	
	public ParserRule getEntityReferenceFieldRule() {
		return getEntityReferenceFieldAccess().getRule();
	}
	
	//CardinalityUpperBound:
	//	INT | '*';
	public CardinalityUpperBoundElements getCardinalityUpperBoundAccess() {
		return pCardinalityUpperBound;
	}
	
	public ParserRule getCardinalityUpperBoundRule() {
		return getCardinalityUpperBoundAccess().getRule();
	}
	
	//EntityReferenceFieldAttr:
	//	glossary=Glossary | widget=WidgetEnum | constraint=EntityTextConstraintDef | db_map=DBMapField |
	//	data_domain=DataDomain | business_rule=BusinessRule;
	public EntityReferenceFieldAttrElements getEntityReferenceFieldAttrAccess() {
		return pEntityReferenceFieldAttr;
	}
	
	public ParserRule getEntityReferenceFieldAttrRule() {
		return getEntityReferenceFieldAttrAccess().getRule();
	}
	
	//EnumEntity:
	//	Enum | Entity;
	public EnumEntityElements getEnumEntityAccess() {
		return pEnumEntity;
	}
	
	public ParserRule getEnumEntityRule() {
		return getEnumEntityAccess().getRule();
	}
	
	//EntityImageField:
	//	'field' name=ID ':' 'Image' ('{'
	//	attrs+=EntityAttr+
	//	'}')?;
	public EntityImageFieldElements getEntityImageFieldAccess() {
		return pEntityImageField;
	}
	
	public ParserRule getEntityImageFieldRule() {
		return getEntityImageFieldAccess().getRule();
	}
	
	//EntityFileField:
	//	'field' name=ID ':' 'File' ('{'
	//	attrs+=EntityAttr+
	//	'}')?;
	public EntityFileFieldElements getEntityFileFieldAccess() {
		return pEntityFileField;
	}
	
	public ParserRule getEntityFileFieldRule() {
		return getEntityFileFieldAccess().getRule();
	}
	
	//EntityEmailField:
	//	'field' name=ID ':' 'Email' ('{'
	//	attrs+=EntityAttr+
	//	'}')?;
	public EntityEmailFieldElements getEntityEmailFieldAccess() {
		return pEntityEmailField;
	}
	
	public ParserRule getEntityEmailFieldRule() {
		return getEntityEmailFieldAccess().getRule();
	}
	
	//EntityDecimalField:
	//	'field' name=ID ':' 'Decimal' ('{'
	//	attrs+=EntityAttr+
	//	'}')?;
	public EntityDecimalFieldElements getEntityDecimalFieldAccess() {
		return pEntityDecimalField;
	}
	
	public ParserRule getEntityDecimalFieldRule() {
		return getEntityDecimalFieldAccess().getRule();
	}
	
	//EntityIntegerField:
	//	'field' name=ID ':' 'Integer' ('{'
	//	attrs+=EntityAttr+
	//	'}')?;
	public EntityIntegerFieldElements getEntityIntegerFieldAccess() {
		return pEntityIntegerField;
	}
	
	public ParserRule getEntityIntegerFieldRule() {
		return getEntityIntegerFieldAccess().getRule();
	}
	
	//EntityCurrencyField:
	//	'field' name=ID ':' 'Currency' ('{'
	//	attrs+=EntityAttr+
	//	'}')?;
	public EntityCurrencyFieldElements getEntityCurrencyFieldAccess() {
		return pEntityCurrencyField;
	}
	
	public ParserRule getEntityCurrencyFieldRule() {
		return getEntityCurrencyFieldAccess().getRule();
	}
	
	//EntityAttr:
	//	glossary=Glossary | widget=Widget | constraint=EntityTextConstraintDef | db_map=DBMapField | data_domain=DataDomain |
	//	business_rule=BusinessRule;
	public EntityAttrElements getEntityAttrAccess() {
		return pEntityAttr;
	}
	
	public ParserRule getEntityAttrRule() {
		return getEntityAttrAccess().getRule();
	}
	
	//ConstraintRequired:
	//	'required' ':' value=('true' | 'false');
	public ConstraintRequiredElements getConstraintRequiredAccess() {
		return pConstraintRequired;
	}
	
	public ParserRule getConstraintRequiredRule() {
		return getConstraintRequiredAccess().getRule();
	}
	
	//ConstraintUnique:
	//	'unique' ':' value=('true' | 'false');
	public ConstraintUniqueElements getConstraintUniqueAccess() {
		return pConstraintUnique;
	}
	
	public ParserRule getConstraintUniqueRule() {
		return getConstraintUniqueAccess().getRule();
	}
	
	//ConstraintMaxLength:
	//	'max_length' ':' value=INT;
	public ConstraintMaxLengthElements getConstraintMaxLengthAccess() {
		return pConstraintMaxLength;
	}
	
	public ParserRule getConstraintMaxLengthRule() {
		return getConstraintMaxLengthAccess().getRule();
	}
	
	//ConstraintMinLength:
	//	'min_length' ':' value=INT;
	public ConstraintMinLengthElements getConstraintMinLengthAccess() {
		return pConstraintMinLength;
	}
	
	public ParserRule getConstraintMinLengthRule() {
		return getConstraintMinLengthAccess().getRule();
	}
	
	////Glossary
	//Glossary:
	//	'glossary' '('
	//	glossary_name=GlossaryName
	//	','
	//	glossary_description=GlossaryDescription
	//	//attrs += GlosaryAttr (',' attrs += GlosaryAttr)* 
	//	')';
	public GlossaryElements getGlossaryAccess() {
		return pGlossary;
	}
	
	public ParserRule getGlossaryRule() {
		return getGlossaryAccess().getRule();
	}
	
	//GlossaryName:
	//	'name' ':' label=STRING;
	public GlossaryNameElements getGlossaryNameAccess() {
		return pGlossaryName;
	}
	
	public ParserRule getGlossaryNameRule() {
		return getGlossaryNameAccess().getRule();
	}
	
	//GlossaryDescription:
	//	'description' ':' label=STRING;
	public GlossaryDescriptionElements getGlossaryDescriptionAccess() {
		return pGlossaryDescription;
	}
	
	public ParserRule getGlossaryDescriptionRule() {
		return getGlossaryDescriptionAccess().getRule();
	}
	
	//WidgetLabel:
	//	'label' ':' label=STRING;
	public WidgetLabelElements getWidgetLabelAccess() {
		return pWidgetLabel;
	}
	
	public ParserRule getWidgetLabelRule() {
		return getWidgetLabelAccess().getRule();
	}
	
	//WidgetHelp:
	//	'help' ':' help=STRING;
	public WidgetHelpElements getWidgetHelpAccess() {
		return pWidgetHelp;
	}
	
	public ParserRule getWidgetHelpRule() {
		return getWidgetHelpAccess().getRule();
	}
	
	//WidgetExposedFilter:
	//	'exposed_filter' ':' exposed_filter=('true' | 'false');
	public WidgetExposedFilterElements getWidgetExposedFilterAccess() {
		return pWidgetExposedFilter;
	}
	
	public ParserRule getWidgetExposedFilterRule() {
		return getWidgetExposedFilterAccess().getRule();
	}
	
	//WidgetType:
	//	'type' ':' type=('Option' | 'Check' | 'Autocomplete');
	public WidgetTypeElements getWidgetTypeAccess() {
		return pWidgetType;
	}
	
	public ParserRule getWidgetTypeRule() {
		return getWidgetTypeAccess().getRule();
	}
	
	//WidgetTypeSelect:
	//	'type' ':' type='SelectList';
	public WidgetTypeSelectElements getWidgetTypeSelectAccess() {
		return pWidgetTypeSelect;
	}
	
	public ParserRule getWidgetTypeSelectRule() {
		return getWidgetTypeSelectAccess().getRule();
	}
	
	//WidgetSortBy:
	//	'sort_by' ':' sortby=ID;
	public WidgetSortByElements getWidgetSortByAccess() {
		return pWidgetSortBy;
	}
	
	public ParserRule getWidgetSortByRule() {
		return getWidgetSortByAccess().getRule();
	}
	
	//WidgetStartYear:
	//	{WidgetStartYear} 'start_year_from_now' ':' start='-'? '+'? INT;
	public WidgetStartYearElements getWidgetStartYearAccess() {
		return pWidgetStartYear;
	}
	
	public ParserRule getWidgetStartYearRule() {
		return getWidgetStartYearAccess().getRule();
	}
	
	//WidgetEndYear:
	//	{WidgetEndYear} 'end_year_from_now' ':' end='-'? '+'? INT;
	public WidgetEndYearElements getWidgetEndYearAccess() {
		return pWidgetEndYear;
	}
	
	public ParserRule getWidgetEndYearRule() {
		return getWidgetEndYearAccess().getRule();
	}
	
	//Widget:
	//	widget='widget' '(' attrs+=WidgetAttr (',' attrs+=WidgetAttr)* ')';
	public WidgetElements getWidgetAccess() {
		return pWidget;
	}
	
	public ParserRule getWidgetRule() {
		return getWidgetAccess().getRule();
	}
	
	//WidgetEnum:
	//	widget='widget' '(' attrs+=WidgetAttrEnum (',' attrs+=WidgetAttrEnum)* ')';
	public WidgetEnumElements getWidgetEnumAccess() {
		return pWidgetEnum;
	}
	
	public ParserRule getWidgetEnumRule() {
		return getWidgetEnumAccess().getRule();
	}
	
	//WidgetDate:
	//	widget='widget' '(' attrs+=WidgetAttrDate (',' attrs+=WidgetAttrDate)* ')';
	public WidgetDateElements getWidgetDateAccess() {
		return pWidgetDate;
	}
	
	public ParserRule getWidgetDateRule() {
		return getWidgetDateAccess().getRule();
	}
	
	//WidgetText:
	//	widget='widget' '(' attrs+=WidgetAttrText (',' attrs+=WidgetAttrText)* ')';
	public WidgetTextElements getWidgetTextAccess() {
		return pWidgetText;
	}
	
	public ParserRule getWidgetTextRule() {
		return getWidgetTextAccess().getRule();
	}
	
	//WidgetAttr:
	//	WidgetLabel | WidgetHelp | WidgetExposedFilter | WidgetDisplayResult;
	public WidgetAttrElements getWidgetAttrAccess() {
		return pWidgetAttr;
	}
	
	public ParserRule getWidgetAttrRule() {
		return getWidgetAttrAccess().getRule();
	}
	
	//WidgetAttrEnum:
	//	WidgetAttrEnumType | WidgetAttrEnumTypeSelect | WidgetDisplayResult;
	public WidgetAttrEnumElements getWidgetAttrEnumAccess() {
		return pWidgetAttrEnum;
	}
	
	public ParserRule getWidgetAttrEnumRule() {
		return getWidgetAttrEnumAccess().getRule();
	}
	
	//WidgetAttrEnumType:
	//	WidgetLabel | WidgetHelp | WidgetExposedFilter | WidgetType;
	public WidgetAttrEnumTypeElements getWidgetAttrEnumTypeAccess() {
		return pWidgetAttrEnumType;
	}
	
	public ParserRule getWidgetAttrEnumTypeRule() {
		return getWidgetAttrEnumTypeAccess().getRule();
	}
	
	//WidgetAttrEnumTypeSelect:
	//	WidgetTypeSelect (',' sortby=WidgetSortBy)?;
	public WidgetAttrEnumTypeSelectElements getWidgetAttrEnumTypeSelectAccess() {
		return pWidgetAttrEnumTypeSelect;
	}
	
	public ParserRule getWidgetAttrEnumTypeSelectRule() {
		return getWidgetAttrEnumTypeSelectAccess().getRule();
	}
	
	//WidgetAttrDate:
	//	WidgetLabel | WidgetHelp | WidgetExposedFilter | WidgetStartYear | WidgetEndYear | WidgetDisplayResult;
	public WidgetAttrDateElements getWidgetAttrDateAccess() {
		return pWidgetAttrDate;
	}
	
	public ParserRule getWidgetAttrDateRule() {
		return getWidgetAttrDateAccess().getRule();
	}
	
	//WidgetAttrText:
	//	WidgetLabel | WidgetHelp | WidgetExposedFilter | WidgetSize | WidgetDisplayResult;
	public WidgetAttrTextElements getWidgetAttrTextAccess() {
		return pWidgetAttrText;
	}
	
	public ParserRule getWidgetAttrTextRule() {
		return getWidgetAttrTextAccess().getRule();
	}
	
	//WidgetSize:
	//	'size' ':' type=WidgetSizeType;
	public WidgetSizeElements getWidgetSizeAccess() {
		return pWidgetSize;
	}
	
	public ParserRule getWidgetSizeRule() {
		return getWidgetSizeAccess().getRule();
	}
	
	//WidgetSizeType:
	//	'XS' | 'SM' | 'MD' | 'LG' | 'XL';
	public WidgetSizeTypeElements getWidgetSizeTypeAccess() {
		return pWidgetSizeType;
	}
	
	public ParserRule getWidgetSizeTypeRule() {
		return getWidgetSizeTypeAccess().getRule();
	}
	
	//WidgetDisplayResult:
	//	'display_result' ':' display_result=('true' | 'false');
	public WidgetDisplayResultElements getWidgetDisplayResultAccess() {
		return pWidgetDisplayResult;
	}
	
	public ParserRule getWidgetDisplayResultRule() {
		return getWidgetDisplayResultAccess().getRule();
	}
	
	////Types
	//BOOLEAN:
	//	'true' | 'false';
	public BOOLEANElements getBOOLEANAccess() {
		return pBOOLEAN;
	}
	
	public ParserRule getBOOLEANRule() {
		return getBOOLEANAccess().getRule();
	}
	
	//DATE:
	//	{DATE} date=DATETIME | now='Now';
	public DATEElements getDATEAccess() {
		return pDATE;
	}
	
	public ParserRule getDATERule() {
		return getDATEAccess().getRule();
	}
	
	//MONTH:
	//	'Jan' | 'Feb' | 'Mar' | 'Apr' | 'May' | 'Jun' | 'Jul' | 'Aug' | 'Sep' | 'Oct' | 'Nov' | 'Dec';
	public MONTHElements getMONTHAccess() {
		return pMONTH;
	}
	
	public ParserRule getMONTHRule() {
		return getMONTHAccess().getRule();
	}
	
	//ActionSearch:
	//	'search' ':' value=('Simple' | 'Complex' | 'None');
	public ActionSearchElements getActionSearchAccess() {
		return pActionSearch;
	}
	
	public ParserRule getActionSearchRule() {
		return getActionSearchAccess().getRule();
	}
	
	//ActionAdd:
	//	'add' ':' value=('true' | 'false');
	public ActionAddElements getActionAddAccess() {
		return pActionAdd;
	}
	
	public ParserRule getActionAddRule() {
		return getActionAddAccess().getRule();
	}
	
	//ActionEdit:
	//	'edit' ':' value=('true' | 'false');
	public ActionEditElements getActionEditAccess() {
		return pActionEdit;
	}
	
	public ParserRule getActionEditRule() {
		return getActionEditAccess().getRule();
	}
	
	//ActionDelete:
	//	'delete' ':' value=('true' | 'false');
	public ActionDeleteElements getActionDeleteAccess() {
		return pActionDelete;
	}
	
	public ParserRule getActionDeleteRule() {
		return getActionDeleteAccess().getRule();
	}
	
	//Action:
	//	ActionSearch | ActionAdd | ActionEdit | ActionDelete;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Actions:
	//	'scaffold' '(' action+=Action (',' action+=Action)* ')';
	public ActionsElements getActionsAccess() {
		return pActions;
	}
	
	public ParserRule getActionsRule() {
		return getActionsAccess().getRule();
	}
	
	//terminal DATETIME:
	//	'0'..'9' '0'..'9' '0'..'9' '0'..'9' ('-' | '/') '0'..'9' '0'..'9' ('-' | '/') '0'..'9' '0'..'9' (' '
	//	'0'..'9' '0'..'9' ':'
	//	'0'..'9' '0'..'9' ':'
	//	'0'..'9' '0'..'9')?;
	public TerminalRule getDATETIMERule() {
		return tDATETIME;
	}
	
	//DBMapEntity:
	//	'db_map' '('
	//	'table' ':' table=STRING (')' | ','
	//	dbmap_attrs+=DBMapAttr (',' dbmap_attrs+=DBMapAttr)* ')');
	public DBMapEntityElements getDBMapEntityAccess() {
		return pDBMapEntity;
	}
	
	public ParserRule getDBMapEntityRule() {
		return getDBMapEntityAccess().getRule();
	}
	
	//DBMapAttr:
	//	DBMapAttrIdentity | DBMapAttrAutoId;
	public DBMapAttrElements getDBMapAttrAccess() {
		return pDBMapAttr;
	}
	
	public ParserRule getDBMapAttrRule() {
		return getDBMapAttrAccess().getRule();
	}
	
	//DBMapAttrIdentity:
	//	'identity' ':' identity=STRING;
	public DBMapAttrIdentityElements getDBMapAttrIdentityAccess() {
		return pDBMapAttrIdentity;
	}
	
	public ParserRule getDBMapAttrIdentityRule() {
		return getDBMapAttrIdentityAccess().getRule();
	}
	
	//DBMapAttrAutoId:
	//	'auto_id' ':' autoid=('true' | 'false');
	public DBMapAttrAutoIdElements getDBMapAttrAutoIdAccess() {
		return pDBMapAttrAutoId;
	}
	
	public ParserRule getDBMapAttrAutoIdRule() {
		return getDBMapAttrAutoIdAccess().getRule();
	}
	
	//DBMapField:
	//	'db_map' '(' 'field' ':' table=STRING (')' | ',' 'pk' ':' pk=('true' | 'false') ')');
	public DBMapFieldElements getDBMapFieldAccess() {
		return pDBMapField;
	}
	
	public ParserRule getDBMapFieldRule() {
		return getDBMapFieldAccess().getRule();
	}
	
	//DataDomain:
	//	'data' '(' 'domain' ':' domain=STRING ')';
	public DataDomainElements getDataDomainAccess() {
		return pDataDomain;
	}
	
	public ParserRule getDataDomainRule() {
		return getDataDomainAccess().getRule();
	}
	
	//BusinessRule:
	//	'business_rule' '(' 'code' ':' code=STRING ',' 'description' ':' description=STRING ')';
	public BusinessRuleElements getBusinessRuleAccess() {
		return pBusinessRule;
	}
	
	public ParserRule getBusinessRuleRule() {
		return getBusinessRuleAccess().getRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
